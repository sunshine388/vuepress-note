import{_ as n,W as s,X as a,Y as t,Z as p,$ as e}from"./framework-d2dfa12e.js";const o="/vuepress-note/images/手写vue2源码/（三十一）组件部分-创建组件虚拟节点/img1.png",c={},i=p("p",null,"组件部分-组件的编译",-1),l=e(`<h2 id="组件的编译流程" tabindex="-1"><a class="header-anchor" href="#组件的编译流程" aria-hidden="true">#</a> 组件的编译流程</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;app&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>my<span class="token operator">-</span>button<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>my<span class="token operator">-</span>button<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上边组件为例，组件的编译过程与模板相似：</p><ul><li>第一步，根据组件 html 模板生成 AST 语法树；</li><li>第二步，根据 AST 语法树生成 render 函数；</li><li>第三步，在 render 函数中，调用 _c 处理组件，生成组件的虚拟节点 componentVnode；</li></ul><p>组件与标签编译的区别：</p><ul><li>标签需要生成标签的虚拟节点；</li><li>组件需要生成组件的虚拟节点；</li></ul><p>因此，可对原 createElement 方法进行扩展，使之支持组件的编译，生成组件的虚拟节点；</p><h2 id="生成组件虚拟节点" tabindex="-1"><a class="header-anchor" href="#生成组件虚拟节点" aria-hidden="true">#</a> 生成组件虚拟节点</h2><h3 id="扩展-createelement-方法" tabindex="-1"><a class="header-anchor" href="#扩展-createelement-方法" aria-hidden="true">#</a> 扩展 createElement 方法</h3><p>原 createElement 方法：生成标签元素的虚拟节点 vnode：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 参数：_c(&#39;标签&#39;, {属性}, ...儿子)</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">...</span>children</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 返回元素的虚拟节点（元素是没有文本的）</span>
  <span class="token keyword">return</span> <span class="token function">vnode</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">,</span> data<span class="token punctuation">.</span>key<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，由于组件的加入，createElement 方法中 tag 不一定是元素，还可能是组件；</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">...</span>children</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token comment">// 添加 tag 为组件时的处理，创建出组件的虚拟节点 componentVnode</span>
  <span class="token comment">// todo ...</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">vnode</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">,</span> data<span class="token punctuation">.</span>key<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>log 打印输出 2 次：</p><ul><li>第一次：my-button（组件）</li><li>第二次：div（标签）</li></ul><p>因此，需要对 createElement 方法进行扩展：添加 tag 为组件时的处理逻辑，创建对应组件的虚拟节点 componentVnode;</p><h3 id="区分组件-or-元素" tabindex="-1"><a class="header-anchor" href="#区分组件-or-元素" aria-hidden="true">#</a> 区分组件 or 元素</h3><p>判断依据：tag 是否属于原始/普通标签：</p><ul><li>如果 tag 属于原始标签，说明 tag 是元素，如：div；</li><li>如果 tag 不属于原始标签，说明 tag 是组件， 如：my-button；</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 添加 tag 为组件时的处理逻辑，创建出组件的虚拟节点</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">...</span>children</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 判断是组件还是元素节点：是否属于普通标签</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isReservedTag</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 组件：非普通标签即为组件</span>
    <span class="token comment">// todo...</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 创建元素的虚拟节点</span>
  <span class="token keyword">return</span> <span class="token function">createComponent</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">,</span> data<span class="token punctuation">.</span>key<span class="token punctuation">,</span> Ctor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创造组件的虚拟节点</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 创造组件的虚拟节点 componentVnode
 */</span>
<span class="token keyword">function</span> <span class="token function">createComponent</span><span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">,</span> key<span class="token punctuation">,</span> Ctor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// todo...</span>
<span class="token punctuation">}</span>

<span class="token comment">// 判定包含关系</span>
<span class="token keyword">function</span> <span class="token function">makeMap</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> tagList <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">tagName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> tagList<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>tagName<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 原始标签</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> isReservedTag <span class="token operator">=</span> <span class="token function">makeMap</span><span class="token punctuation">(</span>
  <span class="token string">&#39;template,script,style,element,content,slot,link,meta,svg,view,button,&#39;</span> <span class="token operator">+</span>
  <span class="token string">&#39;a,div,img,image,text,span,input,switch,textarea,spinner,select,&#39;</span> <span class="token operator">+</span>
  <span class="token string">&#39;slider,slider-neighbor,indicator,canvas,&#39;</span> <span class="token operator">+</span>
  <span class="token string">&#39;list,cell,header,loading,loading-indicator,refresh,scrollable,scroller,&#39;</span> <span class="token operator">+</span>
  <span class="token string">&#39;video,web,embed,tabbar,tabheader,datepicker,timepicker,marquee,countdown&#39;</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="createcomponent-方法定义" tabindex="-1"><a class="header-anchor" href="#createcomponent-方法定义" aria-hidden="true">#</a> createComponent 方法定义</h3><p>获取对应组件的构造函数，并创建组件虚拟节点：</p><ul><li>通过 vm.$options.components 获取对应组件的构造函数；</li><li>通过 createComponent 方法创建组件的虚拟节点；</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 添加 tag 为组件时的处理逻辑，创建出组件的虚拟节点</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">...</span>children</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isReservedTag</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 组件</span>
    <span class="token comment">// 获取组件的构造函数:之前已经保存到了全局 vm.$options.components 上；</span>
    <span class="token keyword">let</span> Ctor <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>components<span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建组件的虚拟节点</span>
    <span class="token keyword">return</span> <span class="token function">createComponent</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">,</span> data<span class="token punctuation">.</span>key<span class="token punctuation">,</span> Ctor<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 创建元素的虚拟节点</span>
  <span class="token keyword">return</span> <span class="token function">vnode</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">,</span> data<span class="token punctuation">.</span>key<span class="token punctuation">,</span> Ctor<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 创造组件的虚拟节点 componentVnode
 */</span>
<span class="token keyword">function</span> <span class="token function">createComponent</span><span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">,</span> key<span class="token punctuation">,</span> Ctor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> componentVnode<span class="token punctuation">;</span>
    <span class="token comment">// todo...</span>
    <span class="token keyword">return</span> componentVnode<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意 Ctor 的取值：</p><ul><li>会先到 vm.$options.components 对象上查找局部组件，如果找到了 Ctor 会是一个对象;（因为局部组件定义不会被 Vue.extend 处理成为组件构造函数）</li><li>如果没找到，会继续到链上找全局组件，此时的 Ctor 会是一个函数；（因为全局组件内部会调用 Vue.extend 处理成为组件构造函数）</li></ul><p>所以，在 createComponent 中，当 Ctor 为对象时，需要先通过 Vue.extend 处理为组件的构造函数；</p><h3 id="createcomponent-方法实现" tabindex="-1"><a class="header-anchor" href="#createcomponent-方法实现" aria-hidden="true">#</a> createComponent 方法实现</h3><p>扩展 vnode 结构 首先，需要扩展 vnode 结构，添加组件选项 componentOptions：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 创造组件的虚拟节点 componentVnode
 */</span>
<span class="token keyword">function</span> <span class="token function">createComponent</span><span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">,</span> key<span class="token punctuation">,</span> Ctor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>Ctor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//  todo：获取 Vue.extend,并将对象处理成为组件的构造函数</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 创建 vnode 时,组件是没有文本的,需要传入 undefined</span>
  <span class="token keyword">let</span> componentVnode <span class="token operator">=</span> <span class="token function">vnode</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> Ctor<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> componentVnode<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// options：可能是组件的构造函数，也可能是对象</span>
<span class="token keyword">function</span> <span class="token function">vnode</span><span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">,</span> key<span class="token punctuation">,</span> text<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    vm<span class="token punctuation">,</span>       <span class="token comment">// 谁的实例</span>
    tag<span class="token punctuation">,</span>      <span class="token comment">// 标签</span>
    data<span class="token punctuation">,</span>     <span class="token comment">// 数据</span>
    children<span class="token punctuation">,</span> <span class="token comment">// 儿子</span>
    key<span class="token punctuation">,</span>      <span class="token comment">// 标识</span>
    text<span class="token punctuation">,</span>     <span class="token comment">// 文本</span>
    <span class="token literal-property property">componentOptions</span><span class="token operator">:</span> options  <span class="token comment">// 组件的选项，包含 Ctor 及其他扩展项</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如何获取到 Vue.extend</p><p>为了便于后续使用 Vue.extend，在初始化时，将 Vue 保存到 Vue.options._base;</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// src/global-api/index.js</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">initGlobalAPI</span><span class="token punctuation">(</span><span class="token parameter">Vue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Vue<span class="token punctuation">.</span>options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">// 当组件初始化时，会使用 Vue.options 和组件 options 进行合并;</span>
  <span class="token comment">// 在这个过程中，_base 也会被合并到组件的 options 上;</span>
  <span class="token comment">// 之后所有的 vm.$options 就都可以取到 _base 即 Vue;</span>
  <span class="token comment">// 这样,在任何地方访问 vm.$options._base 都可以拿到 Vue;</span>
  Vue<span class="token punctuation">.</span>options<span class="token punctuation">.</span>_base <span class="token operator">=</span> Vue<span class="token punctuation">;</span>
  Vue<span class="token punctuation">.</span>options<span class="token punctuation">.</span>components <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  Vue<span class="token punctuation">.</span><span class="token function-variable function">extend</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">opt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
  Vue<span class="token punctuation">.</span><span class="token function-variable function">component</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">id<span class="token punctuation">,</span> definition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当组件初始化时，会将 Vue.options 和组件的 options 进行合并，在这个过程中 _base 也将被合并到组件的 options 上；</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_init</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token comment">// 使用 Vue 的 options 和组件自己的options进行合并</span>
    vm<span class="token punctuation">.</span>$options <span class="token operator">=</span> <span class="token function">mergeOptions</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>options<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">initState</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      vm<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>el<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样一来，所有的 vm.$options 就都能够取到 _base 即 Vue 了;</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 创造组件的虚拟节点 componentVnode
 */</span>
<span class="token keyword">function</span> <span class="token function">createComponent</span><span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">,</span> key<span class="token punctuation">,</span> Ctor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>Ctor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 获取 Vue 并通过 Vue.extend 将对象处理成为组件的构造函数</span>
    Ctor <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>_base<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>Ctor<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 创建vnode时,组件是没有文本的,需要传入 undefined</span>
  <span class="token keyword">let</span> componentVnode <span class="token operator">=</span> <span class="token function">vnode</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> Ctor<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> componentVnode<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以，所有的组件都要通过 Vue.extend 方法，生成组件的构造函数：</p><ul><li>全局组件：在 Vue.component 内部就被 Vue.extend 处理；</li><li>局部组件：在 createComponent 创建组件虚拟节点时，被 Vue.extend 处理；</li></ul><p>扩展组件选项 componentOptions</p><ul><li>组件没有孩子，“组件的孩子”就是插槽，所以 children 应放入 componentOptions 组件选项中；</li><li>当是组件是，data 数据也属于组件，同样也需要放入 componentOptions 组件选项中...</li><li>完整的 componentOptions 应包括：Ctor、propsData、listeners、tag、children；</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createComponent</span><span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">,</span> key<span class="token punctuation">,</span> Ctor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>Ctor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    Ctor <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>_base<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>Ctor<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 注意：组件没有孩子，组件的孩子就是插槽,将 children 放到组件的选项中</span>
  <span class="token keyword">let</span> componentVnode <span class="token operator">=</span> <span class="token function">vnode</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>Ctor<span class="token punctuation">,</span> children<span class="token punctuation">,</span> tag<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> componentVnode<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>备注：
组件虚拟节点的唯一标识应为：vue<span class="token operator">-</span>component<span class="token operator">-</span>cid<span class="token operator">-</span>name
<span class="token operator">-</span> cid：组件实例的唯一标识；
<span class="token operator">-</span> name：组件定义中的 name 属性；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="测试组件虚拟节点生成" tabindex="-1"><a class="header-anchor" href="#测试组件虚拟节点生成" aria-hidden="true">#</a> 测试组件虚拟节点生成</h3><figure><img src="`+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>componentVnode 即为组件的虚拟节点； 其中，componentOptions 选项中包含组件的构造函数 Ctor；</p>',46);function u(d,r){return s(),a("div",null,[i,t(" more "),l])}const v=n(c,[["render",u],["__file","（三十一）组件部分-创建组件虚拟节点.html.vue"]]);export{v as default};
