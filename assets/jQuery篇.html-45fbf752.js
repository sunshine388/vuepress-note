import{_ as n,W as s,X as a,Y as t,Z as e,$ as p}from"./framework-d2dfa12e.js";const o={},c=e("p",null,"jQuery 篇",-1),u=p(`<h2 id="你觉得-jquery-源码有哪些写的好的地方" tabindex="-1"><a class="header-anchor" href="#你觉得-jquery-源码有哪些写的好的地方" aria-hidden="true">#</a> 你觉得 jQuery 源码有哪些写的好的地方</h2><ul><li>jquery 源码封装在一个匿名函数的自执行环境中，有助于防止变量的全局污染，然后通过传入 window 对象参数，可以使 window 对象作为局部变量使用，好处是当 jquery 中访问 window 对象的时候，就不用将作用域链退回到顶层作用域了，从而可以更快的访问 window 对象。同样，传入 undefined 参数，可以缩短查找<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">window<span class="token punctuation">,</span> <span class="token keyword">undefined</span></span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//用一个函数域包起来，就是所谓的沙箱</span>
  <span class="token comment">//在这里边var定义的变量，属于这个函数域内的局部变量，避免污染全局</span>
  <span class="token comment">//把当前沙箱需要的外部变量通过函数参数引入进来</span>
  <span class="token comment">//只要保证参数对内提供的接口的一致性，你还可以随意替换传进来的这个参数</span>
  window<span class="token punctuation">.</span>jQuery <span class="token operator">=</span> window<span class="token punctuation">.</span>$ <span class="token operator">=</span> jQuery<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span> window <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>jquery 将一些原型属性和方法封装在了 jquery.prototype 中，为了缩短名称，又赋值给了 jquery.fn ，这是很形象的写法</li><li>有一些数组或对象的方法经常能使用到， jQuery 将其保存为局部变量以提高访问速度</li><li>jquery 实现的链式调用可以节约代码，所返回的都是同一个对象，可以提高代码效率 undefined 时的作用域链</li></ul><h2 id="是否用过-jquery-的-deferred" tabindex="-1"><a class="header-anchor" href="#是否用过-jquery-的-deferred" aria-hidden="true">#</a> 是否用过 jQuery 的 Deferred</h2><h2 id="jquery-的实现原理" tabindex="-1"><a class="header-anchor" href="#jquery-的实现原理" aria-hidden="true">#</a> jQuery 的实现原理</h2><ul><li>(function(window, undefined) {})(window);</li><li>jQuery 利用 JS 函数作用域的特性，采用立即调用表达式包裹了自身，解决命名空间和变量污染问题</li><li>window.jQuery = window.$ = jQuery;</li><li>在闭包当中将 jQuery 和 $ 绑定到 window 上，从而将 jQuery 和 $ 暴露为全局变量</li></ul><h2 id="query-fn-的-init-方法返回的-this-指的是什么对象" tabindex="-1"><a class="header-anchor" href="#query-fn-的-init-方法返回的-this-指的是什么对象" aria-hidden="true">#</a> Query.fn 的 init 方法返回的 this 指的是什么对象</h2><ul><li>jQuery.fn 的 init 方法 返回的 this 就是 jQuery 对象</li><li>用户使用 jQuery() 或 $() 即可初始化 jQuery 对象，不需要动态的去调用 init 方法</li></ul><h2 id="jquery-extend-与-jquery-fn-extend-的区别" tabindex="-1"><a class="header-anchor" href="#jquery-extend-与-jquery-fn-extend-的区别" aria-hidden="true">#</a> jQuery.extend 与 jQuery.fn.extend 的区别</h2><ul><li>$.fn.extend() 和 $.extend() 是 jQuery 为扩展插件提拱了两个方法</li><li>$.extend(object) ; // 为 jQuery 添加“静态方法”（工具方法）<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
<span class="token function-variable function">min</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">&lt;</span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token function-variable function">max</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">&gt;</span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
$<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>$.extend([true,] targetObject, object1[, object2]); // 对 targt 对象进行扩展<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> settings <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">validate</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token literal-property property">limit</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">validate</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;bar&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
$<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>settings<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 注意：不支持第一个参数传 false</span>
<span class="token comment">// settings == {validate:true, limit:5, name:&quot;bar&quot;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>$.fn.extend(json) ; // 为 jQuery 添加“成员函数”（实例方法）<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function-variable function">alertValue</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#email&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">alertValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="jquery-的属性拷贝-extend-的实现原理是什么-如何实现深拷贝" tabindex="-1"><a class="header-anchor" href="#jquery-的属性拷贝-extend-的实现原理是什么-如何实现深拷贝" aria-hidden="true">#</a> jQuery 的属性拷贝(extend)的实现原理是什么，如何实现深拷贝</h2><ul><li>浅拷贝（只复制一份原始对象的引用） var newObject = $.extend({}, oldObject);</li><li>深拷贝（对原始对象属性所引用的对象进行进行递归拷贝） var newObject =$.extend(true, {}, oldObject);</li></ul><h2 id="jquery-的队列是如何实现的" tabindex="-1"><a class="header-anchor" href="#jquery-的队列是如何实现的" aria-hidden="true">#</a> jQuery 的队列是如何实现的</h2><ul><li>jQuery 核心中有一组队列控制方法，由 queue()/dequeue()/clearQueue() 三个方法组成。</li><li>主要应用于 animate() ， ajax ，其他要按时间顺序执行的事件中</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">func1</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;事件1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token keyword">var</span> <span class="token function-variable function">func2</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;事件2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token keyword">var</span> <span class="token function-variable function">func3</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;事件3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token keyword">var</span> <span class="token function-variable function">func4</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;事件4&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token comment">// 入栈队列事件</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#box&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span><span class="token string">&quot;queue1&quot;</span><span class="token punctuation">,</span> func1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// push func1 to queue1</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#box&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span><span class="token string">&quot;queue1&quot;</span><span class="token punctuation">,</span> func2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// push func2 to queue1</span>
<span class="token comment">// 替换队列事件</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#box&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span><span class="token string">&quot;queue1&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// delete queue1 with empty array</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#box&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span><span class="token string">&quot;queue1&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>func3<span class="token punctuation">,</span> func4<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// replace queue1</span>
<span class="token comment">// 获取队列事件（返回一个函数数组）</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#box&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span><span class="token string">&quot;queue1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [func3(), func4()]</span>
<span class="token comment">// 出栈队列事件并执行</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#box&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token string">&quot;queue1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// return func3 and do func3</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#box&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token string">&quot;queue1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// return func4 and do func4</span>
<span class="token comment">// 清空整个队列</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#box&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clearQueue</span><span class="token punctuation">(</span><span class="token string">&quot;queue1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// delete queue1 with clearQueue</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jquery-中的-bind-live-delegate-on-的区别" tabindex="-1"><a class="header-anchor" href="#jquery-中的-bind-live-delegate-on-的区别" aria-hidden="true">#</a> jQuery 中的 bind(), live(), delegate(), on()的区别</h2><ul><li>bind() 直接绑定在目标元素上</li><li>live() 通过冒泡传播事件，默认 document 上，支持动态数据</li><li>delegate() 更精确的小范围使用事件代理，性能优于 live</li><li>on() 是最新的 1.9 版本整合了之前的三种方式的新事件绑定机制</li></ul><h2 id="是否知道自定义事件" tabindex="-1"><a class="header-anchor" href="#是否知道自定义事件" aria-hidden="true">#</a> 是否知道自定义事件</h2><ul><li>事件即“发布/订阅”模式，自定义事件即“消息发布”，事件的监听即“订阅订阅”</li><li>JS 原生支持自定义事件，示例：<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">createEvent</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建事件</span>
Fevent<span class="token punctuation">.</span><span class="token function">initEvent</span><span class="token punctuation">(</span>eventType<span class="token punctuation">,</span> canBubble<span class="token punctuation">,</span> prevent<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 初始化事件</span>
target<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;dataavailable&#39;</span><span class="token punctuation">,</span> handler<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 监听事件</span>
target<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 触发事件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>jQuery 里的 fire 函数用于调用 jQuery 自定义事件列表中的事件</li></ul><h2 id="jquery-通过哪个方法和-sizzle-选择器结合的" tabindex="-1"><a class="header-anchor" href="#jquery-通过哪个方法和-sizzle-选择器结合的" aria-hidden="true">#</a> jQuery 通过哪个方法和 Sizzle 选择器结合的</h2><ul><li>Sizzle 选择器采取 Right To Left 的匹配模式，先搜寻所有匹配标签，再判断它的父节点</li><li>jQuery 通过 $(selecter).find(selecter); 和 Sizzle 选择器结合</li></ul><h2 id="jquery-中如何将数组转化为-json-字符串-然后再转化回来" tabindex="-1"><a class="header-anchor" href="#jquery-中如何将数组转化为-json-字符串-然后再转化回来" aria-hidden="true">#</a> jQuery 中如何将数组转化为 JSON 字符串，然后再转化回来</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 通过原生 JSON.stringify/JSON.parse 扩展 jQuery 实现</span>
$<span class="token punctuation">.</span><span class="token function-variable function">array2json</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
$<span class="token punctuation">.</span><span class="token function-variable function">json2array</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// $.parseJSON(array); // 3.0 开始，已过时</span>
  <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 调用</span>
<span class="token keyword">var</span> json <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">array2json</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> array <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">json2array</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jquery-一个对象可以同时绑定多个事件-这是如何实现的" tabindex="-1"><a class="header-anchor" href="#jquery-一个对象可以同时绑定多个事件-这是如何实现的" aria-hidden="true">#</a> jQuery 一个对象可以同时绑定多个事件，这是如何实现的</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#btn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;mouseover mouseout&quot;</span><span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;#btn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">mouseover</span><span class="token operator">:</span> func1<span class="token punctuation">,</span>
  <span class="token literal-property property">mouseout</span><span class="token operator">:</span> func2<span class="token punctuation">,</span>
  <span class="token literal-property property">click</span><span class="token operator">:</span> func3
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="针对-jquery-的优化方法" tabindex="-1"><a class="header-anchor" href="#针对-jquery-的优化方法" aria-hidden="true">#</a> 针对 jQuery 的优化方法</h2><ul><li>缓存频繁操作 DOM 对象</li><li>尽量使用 id 选择器代替 class 选择器</li><li>总是从 #id 选择器来继承</li><li>尽量使用链式操作</li><li>使用时间委托 on 绑定事件</li><li>采用 jQuery 的内部函数 data() 来存储数据</li><li>使用最新版本的 jQuery</li></ul><h2 id="jquery-的-slideup-动画-当鼠标快速连续触发-动画会滞后反复执-行-该如何处理呢" tabindex="-1"><a class="header-anchor" href="#jquery-的-slideup-动画-当鼠标快速连续触发-动画会滞后反复执-行-该如何处理呢" aria-hidden="true">#</a> jQuery 的 slideUp 动画，当鼠标快速连续触发, 动画会滞后反复执 行，该如何处理呢</h2><ul><li>在触发元素上的事件设置为延迟处理：使用 JS 原生 setTimeout 方法</li><li>在触发元素的事件时预先停止所有的动画，再执行相应的动画事件： $(&#39;.tab&#39;).stop().slideUp();</li></ul><h2 id="jquery-ui-如何自定义组件" tabindex="-1"><a class="header-anchor" href="#jquery-ui-如何自定义组件" aria-hidden="true">#</a> jQuery UI 如何自定义组件</h2><ul><li>通过向 $.widget() 传递组件名称和一个原型对象来完成</li><li>$.widget(&quot;ns.widgetName&quot;, [baseWidget], widgetPrototype);</li></ul><h2 id="jquery-与-jquery-ui、jquery-mobile-区别" tabindex="-1"><a class="header-anchor" href="#jquery-与-jquery-ui、jquery-mobile-区别" aria-hidden="true">#</a> jQuery 与 jQuery UI、jQuery Mobile 区别</h2><ul><li>jQuery 是 JS 库，兼容各种 PC 浏览器，主要用作更方便地处理 DOM 、事件、动画、AJAX</li><li>jQuery UI 是建立在 jQuery 库上的一组用户界面交互、特效、小部件及主题</li><li>jQuery Mobile 以 jQuery 为基础，用于创建“移动 Web 应用”的框架</li></ul><h2 id="jquery-和-zepto-的区别-各自的使用场" tabindex="-1"><a class="header-anchor" href="#jquery-和-zepto-的区别-各自的使用场" aria-hidden="true">#</a> jQuery 和 Zepto 的区别？ 各自的使用场</h2><ul><li>jQuery 主要目标是 PC 的网页中，兼容全部主流浏览器。在移动设备方面，单独推出jQuery Mobile</li><li>Zepto 从一开始就定 位移动设备，相对更轻量级。它的 API 基本兼容 jQuery，但对 PC 浏览器兼容不理想</li></ul><h2 id="jquery-对象的特点" tabindex="-1"><a class="header-anchor" href="#jquery-对象的特点" aria-hidden="true">#</a> jQuery 对象的特点</h2><ul><li>只有 JQuery 对象才能使用 JQuery 方法</li><li>JQuery 对象是一个数组对象</li></ul>`,36);function i(l,r){return s(),a("div",null,[c,t(" more "),u])}const d=n(o,[["render",i],["__file","jQuery篇.html.vue"]]);export{d as default};
