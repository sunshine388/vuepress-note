import{_ as n,W as s,X as a,Y as t,Z as p,$ as e}from"./framework-d2dfa12e.js";const o={},c=p("p",null,"组件部分 - 组件的合并策略",-1),l=e(`<h2 id="前文回顾" tabindex="-1"><a class="header-anchor" href="#前文回顾" aria-hidden="true">#</a> 前文回顾</h2><p>在前面的两篇中，分别介绍了组件部分的 Vue.component 和 Vue.extend 实现：</p><p>Vue.component：定义组件并维护到全局 Vue.options.components 中；</p><p>Vue.extend：根据选项参数创建子类，即组件的构造函数；</p><h2 id="组件合并的位置" tabindex="-1"><a class="header-anchor" href="#组件合并的位置" aria-hidden="true">#</a> 组件合并的位置</h2><p><strong>执行情况分析</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;my-button&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;my-button&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token string">&#39;&lt;button&gt;全局组件&lt;/button&gt;&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上边的 Vue.component 执行完成后，Vue.options.components 中就已经存储了全局组件的构造函数；</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;my-button&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;my-button&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token string">&#39;&lt;button&gt;全局组件&lt;/button&gt;&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&quot;#app&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token string-property property">&#39;my-button&#39;</span><span class="token operator">:</span><span class="token punctuation">{</span>
          <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token string">&#39;&lt;button&gt;局部组件&lt;/button&gt;&#39;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当 new Vue 执行时，会进行组件的初始化流程，调用 _init 方法:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// src/init.js#initMixin</span>

<span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_init</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token comment">// this 指向当前 vue 实例</span>
  <span class="token comment">// vm.$options = options; // 将 Vue 实例化时用户传入的options暴露到vm实例上</span>
  <span class="token comment">// 此时需使用 options 与 mixin 合并后的全局 options 再进行一次合并</span>
  vm<span class="token punctuation">.</span>$options <span class="token operator">=</span> <span class="token function">mergeOptions</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>options<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 目前在 vue 实例化时，传入的 options 只有 el 和 data 两个参数</span>
  <span class="token function">initState</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 状态的初始化</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 将数据挂在到页面上（此时,数据已经被劫持）</span>
    vm<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，mergeOptions 方法对 vm.constructor.options 和 options 进行合并：</p><ul><li>vm.constructor.options 包含 Vue.options.components 中的全局组件；</li><li>options 为执行 new Vue 时传入的局部组件选项;</li></ul><p>即在这个位置，就会进行全局组件和局部组件的合并；</p><p><strong>函数 or 对象分析</strong></p><ul><li>在 vm.constructor.options 中的全局组件 my-button 是一个函数；</li><li>而在 options 中的局部组件 my-button 是一个对象；</li></ul><p>原因分析:</p><ul><li>全局组件定义 Vue.component 中，传入的对象，内部会被 Vue.extends 处理成为函数；</li><li>内部组件定义 components 中，传入的对象，内部不会被 Vue.extends 处理，仍是对象；</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
    <span class="token comment">// 全局组件</span>
    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;my-button&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token comment">// 内部被 Vue.extends 处理，成为一个构造函数</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;my-button&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token string">&#39;&lt;button&gt;Hello Vue 全局组件&lt;/button&gt;&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&quot;#app&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">{</span>  <span class="token comment">// 这里不会被 Vue.extends 处理，就真的是一个对象</span>
        <span class="token string-property property">&#39;my-button&#39;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token comment">// 局部组件</span>
          <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token string">&#39;&lt;button&gt;Hello Vue 局部组件&lt;/button&gt;&#39;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="组件合并的策略" tabindex="-1"><a class="header-anchor" href="#组件合并的策略" aria-hidden="true">#</a> 组件合并的策略</h2><h3 id="策略模式" tabindex="-1"><a class="header-anchor" href="#策略模式" aria-hidden="true">#</a> 策略模式</h3><p>在之前做 mixin 生命周期的合并时，在 mergeOptions 方法中使用了策略模式：</p><ul><li>针对不同生命周期钩子，声明各自的合并策略；</li><li>如果在没有找到对应的策略，默认使用新值覆盖老值；</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> strats <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 存放所有策略</span>
<span class="token keyword">let</span> lifeCycle <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;beforeCreate&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;created&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;beforeMount&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mounted&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 创建各生命周期的合并策略</span>
lifeCycle<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">hook</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  strats<span class="token punctuation">[</span>hook<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">parentVal<span class="token punctuation">,</span> childVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在strats策略对象中，定义了各生命周期的合并策略</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 对象合并:将childVal合并到parentVal中
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">parentVal</span>   父值-老值
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">childVal</span>    子值-新值
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">mergeOptions</span><span class="token punctuation">(</span><span class="token parameter">parentVal<span class="token punctuation">,</span> childVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> parentVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">mergeFiled</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> childVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 当新值存在，老值不存在时：添加到老值中</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>parentVal<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">mergeFiled</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 合并当前 key</span>
  <span class="token keyword">function</span> <span class="token function">mergeFiled</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 策略模式：获取当前 key 的合并策略</span>
    <span class="token keyword">let</span> strat <span class="token operator">=</span> strats<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>strat<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      options<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">strat</span><span class="token punctuation">(</span>parentVal<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> childVal<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 默认合并策略：新值覆盖老值</span>
      options<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> childVal<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">||</span> parentVal<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> options<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，就可以通过策略模式，实现了在 strats 中配置 component 对应的合并策略；</p><p>在 mergeOptions 方法执行并处理 component 合并时，就会根据配置好的策略进行合并；</p><h3 id="合并策略" tabindex="-1"><a class="header-anchor" href="#合并策略" aria-hidden="true">#</a> 合并策略</h3><p>将 vm.constructor.options 和 options 进行合并，先找局部组件再找全局组件；</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// parentVal为函数；childVal为对象；</span>
strats<span class="token punctuation">.</span><span class="token function-variable function">component</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">parentVal<span class="token punctuation">,</span> childVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 继承：子类可以沿着链找到父类的属性 childVal.__proto__ = parentVal</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>parentVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>childVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> childVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      res<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> childVal<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="组件合并后测试" tabindex="-1"><a class="header-anchor" href="#组件合并后测试" aria-hidden="true">#</a> 组件合并后测试</h2><p>测试组件合并</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
    <span class="token comment">// 全局组件</span>
    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;my-button&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;my-button&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token string">&#39;&lt;button&gt;Hello Vue 全局组件&lt;/button&gt;&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&quot;#app&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token comment">// 局部组件</span>
        <span class="token string-property property">&#39;my-button&#39;</span><span class="token operator">:</span><span class="token punctuation">{</span>
          <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token string">&#39;&lt;button&gt;Hello Vue 局部组件&lt;/button&gt;&#39;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 mergeOptions 方法中，会找到预设的组件合并策略函数：</p><p>组件合并：</p><p>此时，参数 parentVal 是一个函数；参数 childVal 是一个对象；</p><p>生成的新对象 res 可以在链上拿到 parentVal 上的全局组件：</p><p>再将儿子全部合并到新生成的 res 对象上：</p><p>这样，在 res 上查找组件时，会先查找局部组件，如果没找到，则继续通过链找到全局组件；</p><p>优先查找局部组件，如果没有会沿着链向上继续找，找到局部组件；</p>`,39);function i(u,r){return s(),a("div",null,[c,t(" more "),l])}const d=n(o,[["render",i],["__file","（二十九）组件部分-组件的合并.html.vue"]]);export{d as default};
