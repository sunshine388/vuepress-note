import{_ as n,W as s,X as a,Y as e,Z as t,$ as p}from"./framework-d2dfa12e.js";const o={},c=t("p",null,"使用真实节点替换原始节点",-1),l=p(`<h2 id="新老节点的更新方案" tabindex="-1"><a class="header-anchor" href="#新老节点的更新方案" aria-hidden="true">#</a> 新老节点的更新方案</h2><p>如何进行新老节点的替换？</p><p>若使用 replace 方法进行 dom 替换，就需要找到父节点，还需要指定用谁替换谁，使用起来不方便</p><p>Vue 的实现方式：</p><ol><li>找到老节点；</li><li>将新节点插入到老节点之后，新老为兄弟节点；</li><li>删除老节点；</li></ol><p>这种实现的优势是：能够确保在新老节点完成更新后，文档的顺序不变；</p><h2 id="虚拟节点与真实节点映射" tabindex="-1"><a class="header-anchor" href="#虚拟节点与真实节点映射" aria-hidden="true">#</a> 虚拟节点与真实节点映射</h2><p>问题：为什么要做真实节点与虚拟节点的映射关系？</p><p>当虚拟节点被更新时，便于跟踪并找到与之【vnode】对应的真实节点【el】，完成真实节点的更新操作</p><p>代码实现：</p><p>将真实节点绑定到 vnode 扩展属性 el 上：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createElm</span><span class="token punctuation">(</span><span class="token parameter">vnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> <span class="token punctuation">{</span> tag<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">,</span> text<span class="token punctuation">,</span> vm <span class="token punctuation">}</span> <span class="token operator">=</span> vnode<span class="token punctuation">;</span>
  <span class="token comment">// vnode.el:绑定真实节点与虚拟节点的映射关系，便于后续的节点更新操作</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> tag <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    vnode<span class="token punctuation">.</span>el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建元素的真实节点</span>
    <span class="token function">updateProperties</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>el<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 处理元素的 data 属性</span>
    <span class="token comment">// 处理当前元素节点的儿子：递归创建儿子的真实节点，并添加到对应的父亲中</span>
    children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">child</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 若不存在儿子，children为空数组</span>
      vnode<span class="token punctuation">.</span>el<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">createElm</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 文本：文本中 tag 是 undefined</span>
    vnode<span class="token punctuation">.</span>el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建文本的真实节点</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> vnode<span class="token punctuation">.</span>el<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实现新老节点的替换" tabindex="-1"><a class="header-anchor" href="#实现新老节点的替换" aria-hidden="true">#</a> 实现新老节点的替换</h2><p>根据新老节点的更新方案：</p><ol><li>找到元素的父亲节点</li><li>找到老节点的下一个兄弟节点</li><li>将新节点插入到老节点的下一个兄弟节点前面</li><li>删除老节点</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 将虚拟节点转为真实节点后插入到元素中
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">el</span>    当前真实元素 id#app
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">vnode</span> 虚拟节点
 * <span class="token keyword">@returns</span>         新的真实元素
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">patch</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> vnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 1，根据虚拟节点创建真实节点</span>
  <span class="token keyword">const</span> elm <span class="token operator">=</span> <span class="token function">createElm</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;createElm&quot;</span><span class="token punctuation">,</span> elm<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 2，使用真实节点替换掉老节点</span>
  <span class="token comment">// 找到元素的父亲节点</span>
  <span class="token keyword">const</span> parentNode <span class="token operator">=</span> el<span class="token punctuation">.</span>parentNode<span class="token punctuation">;</span>
  <span class="token comment">// 找到老节点的下一个兄弟节点（nextSibling 若不存在将返回 null）</span>
  <span class="token keyword">const</span> nextSibling <span class="token operator">=</span> el<span class="token punctuation">.</span>nextSibling<span class="token punctuation">;</span>
  <span class="token comment">// 将新节点elm插入到老节点el的下一个兄弟节点nextSibling的前面</span>
  <span class="token comment">// 备注：若nextSibling为 null，insertBefore 等价与 appendChild</span>
  parentNode<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>elm<span class="token punctuation">,</span> nextSibling<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 删除老节点 el</span>
  parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> elm<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，就完成 Vue 文档中的“Create vm.$el and replace &#39;el&#39; with it”，即完成了 Vue 的初始化流程</p>`,17);function i(u,d){return s(),a("div",null,[c,e(" more "),l])}const k=n(o,[["render",i],["__file","（十六）使用真实节点替换原始节点.html.vue"]]);export{k as default};
