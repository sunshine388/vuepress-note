import{_ as n,W as s,X as a,Y as t,Z as e,$ as p}from"./framework-d2dfa12e.js";const o={},c=e("p",null,"生成 ast 语法树-正则说明",-1),l=p(`<h2 id="模板解析" tabindex="-1"><a class="header-anchor" href="#模板解析" aria-hidden="true">#</a> 模板解析</h2><h3 id="模板解析的说明" tabindex="-1"><a class="header-anchor" href="#模板解析的说明" aria-hidden="true">#</a> 模板解析的说明</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">compileToFunction</span><span class="token punctuation">(</span><span class="token parameter">template</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 1，将模板变成 AST 语法树</span>
  <span class="token keyword">let</span> ast <span class="token operator">=</span> <span class="token function">parserHTML</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 2，使用 AST 生成 render 函数</span>
  <span class="token keyword">let</span> code <span class="token operator">=</span> <span class="token function">generate</span><span class="token punctuation">(</span>ast<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>compileToFunction 主要做了以上两件事：</p><blockquote><p>将模板变成 AST 语法树</p><p>使用 AST 生成 render 函数</p></blockquote><p>而将 html 模板编译为 ast 语法树，就是用 js 对象的树形结构来描述 HTML 语法；这里需要对 html 模板进行解析，而解析的方式就是使用正则不断进行匹配和处理；</p><h3 id="模板的解析方式" tabindex="-1"><a class="header-anchor" href="#模板的解析方式" aria-hidden="true">#</a> 模板的解析方式</h3><ol><li>使用正则对 html 模板进行顺序解析和处理</li><li>每处理完一段，就将处理完的这部分截取掉</li><li>就这样不停的进行解析和截取，直至将整个模板全部解析完毕</li></ol><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- start：从头开始，使用正则不断进行匹配和截取 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>abcdefg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>		开始标签：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
abcdefg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>				文本：abcdefg
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>								开始标签：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>											结束标签：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>														结束标签：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- end：全部匹配完成 --&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用 while 循环，对模板不停截取，直至全部解析完毕</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">parserHTML</span><span class="token punctuation">(</span><span class="token parameter">html</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>html<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// todo...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>标签还是文本？</p><blockquote><p>内容开头的第一个字符是否为尖角号 &lt; ：</p><p>如果是尖角号，说明是标签；如果不是尖角号，说明是文本</p></blockquote><h2 id="正则说明" tabindex="-1"><a class="header-anchor" href="#正则说明" aria-hidden="true">#</a> 正则说明</h2><h3 id="vue2-相关的正则" tabindex="-1"><a class="header-anchor" href="#vue2-相关的正则" aria-hidden="true">#</a> Vue2 相关的正则</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 标签名 a-aaa</span>
<span class="token keyword">const</span> ncname <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[a-zA-Z_][\\\\-\\\\.0-9_a-zA-Z]*</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token comment">// 命名空间标签 aa:aa-xxx</span>
<span class="token keyword">const</span> qnameCapture <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">((?:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ncname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\\\:)?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ncname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token comment">// 开始标签</span>
<span class="token keyword">const</span> startTagOpen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">^&lt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>qnameCapture<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 标签开头的正则 捕获的内容是标签名</span>
<span class="token comment">// 结束标签</span>
<span class="token keyword">const</span> endTag <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">^&lt;\\\\/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>qnameCapture<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">[^&gt;]*&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 匹配标签结尾的 &lt;/div&gt;</span>
<span class="token comment">// 匹配属性</span>
<span class="token keyword">const</span> attribute <span class="token operator">=</span>
  <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\s*([^\\s&quot;&#39;&lt;&gt;\\/=]+)(?:\\s*(=)\\s*(?:&quot;([^&quot;]*)&quot;+|&#39;([^&#39;]*)&#39;+|([^\\s&quot;&#39;=&lt;&gt;\`]+)))?</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token comment">// 匹配标签结束的 &gt;</span>
<span class="token keyword">const</span> startTagClose <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\s*(\\/?)&gt;</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token comment">// 匹配 {{ }} 表达式</span>
<span class="token keyword">const</span> defaultTagRE <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\{\\{((?:.|\\r?\\n)+?)\\}\\}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="匹配标签名" tabindex="-1"><a class="header-anchor" href="#匹配标签名" aria-hidden="true">#</a> 匹配标签名</h3><p>匹配标签名 aa-xxx</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> ncname <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[a-zA-Z_][\\\\-\\\\.0-9_a-zA-Z]*</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>正则解析</p><blockquote><p>正则的开始和结尾被/包裹</p><p>\\\\-\\\\编译成\\-\\. （第一个\\，\\-是转译中划线-的；第二个\\，\\.是转译.的，）</p></blockquote><p>测试匹配结果</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>ncname<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 	/[a-zA-Z_][\\-\\.0-9_a-zA-Z]*/</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;a-aaa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true	任意小写字符 a-z，中间有-，后面可以方字符</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="命名空间标签" tabindex="-1"><a class="header-anchor" href="#命名空间标签" aria-hidden="true">#</a> 命名空间标签</h3><p>命名空间标签：aa:aa-xxx</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> qnameCapture <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">((?:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ncname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\\\:)?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ncname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>正则解析</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>(?:\${ncname}\\\\:)?
	?: - 表示匹配但是不捕获
	后面可以有一个冒号
  ? 可有可无
  如：aa:
\${ncname} 标签名
	如：aa:aa-xxx	此类命名空间标签使用较少
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="匹配开始标签-开始部分" tabindex="-1"><a class="header-anchor" href="#匹配开始标签-开始部分" aria-hidden="true">#</a> 匹配开始标签-开始部分</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 匹配标签名(索引1)：&lt;aa:aa-xxx</span>
<span class="token keyword">const</span> startTagOpen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">^&lt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>qnameCapture<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 标签开头的正则 捕获的内容是标签名</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>startTagOpen<span class="token punctuation">)</span>  <span class="token comment">//  /^&lt;((?:[a-zA-Z_][\\-\\.0-9_a-zA-Z]*\\:)?[a-zA-Z_][\\-\\.0-9_a-zA-Z]*)/</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>startTagOpen<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;aa:aa-xxx&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>

<span class="token comment">// 测试匹配结果：</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;aa:aa-xxx&#39;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>startTagOpen<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span>
  <span class="token string">&#39;&lt;aa:aa-xxx&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;aa:aa-xxx&#39;</span><span class="token punctuation">,</span>			<span class="token comment">// 开始标签的标签名</span>
  <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&#39;&lt;aa:aa-xxx&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">groups</span><span class="token operator">:</span> <span class="token keyword">undefined</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="匹配结束标签" tabindex="-1"><a class="header-anchor" href="#匹配结束标签" aria-hidden="true">#</a> 匹配结束标签</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 匹配标签名(索引1)：&lt;/aa:aa-xxxdsadsa&gt;</span>
<span class="token keyword">const</span> endTag <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">^&lt;\\\\/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>qnameCapture<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">[^&gt;]*&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 匹配标签结尾的 &lt;/div&gt;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>endTag<span class="token punctuation">)</span> <span class="token comment">// /^&lt;\\/((?:[a-zA-Z_][\\-\\.0-9_a-zA-Z]*\\:)?[a-zA-Z_][\\-\\.0-9_a-zA-Z]*)[^&gt;]*&gt;/</span>

正则解析：
<span class="token operator">^</span><span class="token operator">&lt;</span>\\\\<span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">		&lt;符号开头，后面跟一个</span><span class="token regex-delimiter">/</span></span>
$<span class="token punctuation">{</span>qnameCapture<span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token operator">^</span><span class="token operator">&gt;</span><span class="token punctuation">]</span>		中间可以放很多但不能是<span class="token operator">&gt;</span>
<span class="token operator">*</span><span class="token operator">&gt;</span>	最后必须要有一个<span class="token operator">&gt;</span>

<span class="token comment">// 测试匹配结果：</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;/aa:aa-xxxdsadsa&gt;&#39;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>endTag<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span>
  <span class="token string">&#39;&lt;/aa:aa-xxxdsadsa&gt;&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;aa:aa-xxxdsadsa&#39;</span><span class="token punctuation">,</span> 		<span class="token comment">// 结束标签的标签名</span>
  <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&#39;&lt;/aa:aa-xxxdsadsa&gt;&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">groups</span><span class="token operator">:</span> <span class="token keyword">undefined</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="匹配属性" tabindex="-1"><a class="header-anchor" href="#匹配属性" aria-hidden="true">#</a> 匹配属性</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 匹配属性（索引 1 为属性 key、索引 3、4、5 其中一直为属性值）：aaa=&quot;xxx&quot;、aaa=&#39;xxx&#39;、aaa=xxx</span>
<span class="token keyword">const</span> attribute <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\s*([^\\s&quot;&#39;&lt;&gt;\\/=]+)(?:\\s*(=)\\s*(?:&quot;([^&quot;]*)&quot;+|&#39;([^&#39;]*)&#39;+|([^\\s&quot;&#39;=&lt;&gt;\`]+)))?</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>

正则解析：
<span class="token operator">^</span>\\s<span class="token operator">*</span>  n个空格开头（<span class="token number">0</span> 个或 n 个）
<span class="token punctuation">[</span><span class="token operator">^</span>\\s&quot;&#39;<span class="token operator">&lt;</span><span class="token operator">&gt;</span>\\<span class="token operator">/=</span><span class="token punctuation">]</span><span class="token operator">+</span>
 	<span class="token operator">^</span>\\s	不是空格
	<span class="token operator">^</span>\\s&quot;&#39;<span class="token operator">&lt;</span><span class="token operator">&gt;</span>\\<span class="token operator">/=</span>	不是空格，不是尖脚号，不是反引号的 n 个字符
<span class="token operator">?</span><span class="token operator">:</span>\\s<span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">=</span><span class="token punctuation">)</span>\\s<span class="token operator">*</span>
  空格和空格之间可以夹一个<span class="token operator">=</span>等号
<span class="token operator">?</span><span class="token operator">:</span><span class="token string">&quot;([^&quot;</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">&quot;+|&#39;([^&#39;]*)&#39;+|([^\\s&quot;</span>&#39;<span class="token operator">=</span><span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">]+)
	不是空格，可能是单引号、可能是双引号、可能没有引号

// 情况 1：双引号的情况，aaa=&quot;xxx&quot;
console.log(&#39;aaa=&quot;xxx&quot;&#39;.match(attribute))
[
  &#39;aaa=&quot;xxx&quot;&#39;,
  &#39;aaa&#39;,
  &#39;=&#39;,
  &#39;xxx&#39;,
  undefined,
  undefined,
  index: 0,
  input: &#39;aaa=&quot;xxx&quot;&#39;,
  groups: undefined
]
// 此时，索引3是有值的(xxx),4、5是undefined

// 情况 2：单引号的情况，aaa=&#39;xxx&#39;，会匹配到下一个位置
console.log(</span><span class="token template-punctuation string">\`</span></span>aaa<span class="token operator">=</span><span class="token string">&#39;xxx&#39;</span>\`<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>attribute<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span>
  <span class="token string">&quot;aaa=&#39;xxx&#39;&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;aaa&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span>
  <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  <span class="token string">&#39;xxx&#39;</span><span class="token punctuation">,</span>
  <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&quot;aaa=&#39;xxx&#39;&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">groups</span><span class="token operator">:</span> <span class="token keyword">undefined</span>
<span class="token punctuation">]</span>
<span class="token comment">// 此时，会匹配到索引 4，即第二个位置</span>

<span class="token comment">// 情况 3：没有引号的情况,aaa=xxx，第三个位置就是不带单引号的</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;aaa=xxx&#39;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>attribute<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span>
  <span class="token string">&#39;aaa=xxx&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;aaa&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span>
  <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  <span class="token string">&#39;xxx&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&#39;aaa=xxx&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">groups</span><span class="token operator">:</span> <span class="token keyword">undefined</span>
<span class="token punctuation">]</span>
<span class="token comment">// 索引3、4是undefined，5 是有值的(xxx),表示匹配到了最后一位</span>

应用：
属性的key：<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
属性的值：<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">||</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">||</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span>    索引 <span class="token number">3</span>、<span class="token number">4</span>、<span class="token number">5</span> 哪个有值取哪个
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="匹配开始标签-闭合部分" tabindex="-1"><a class="header-anchor" href="#匹配开始标签-闭合部分" aria-hidden="true">#</a> 匹配开始标签-闭合部分</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 匹配结束标签：&gt;</span>
<span class="token keyword">const</span> startTagClose <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\s*(\\/?)&gt;</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>

正则解析：

<span class="token operator">^</span>\\s<span class="token operator">*</span> 	空格 n <span class="token function">个</span>
<span class="token punctuation">(</span>\\<span class="token operator">/</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>	尖角号有以下两种情况
	<span class="token operator">/</span><span class="token operator">&gt;</span>	自闭合
  <span class="token operator">&gt;</span>		没有<span class="token operator">/</span>的闭合
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="匹配表达式" tabindex="-1"><a class="header-anchor" href="#匹配表达式" aria-hidden="true">#</a> 匹配表达式</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 匹配 {{   xxx    }} ，匹配到 xxx</span>
<span class="token keyword">const</span> defaultTagRE <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\{\\{((?:.|\\r?\\n)+?)\\}\\}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,38);function i(u,r){return s(),a("div",null,[c,t(" more "),l])}const k=n(o,[["render",i],["__file","（九）生成ast语法树-正则说明.html.vue"]]);export{k as default};
