import{_ as s,W as a,X as t,Y as p,Z as e,$ as o}from"./framework-d2dfa12e.js";const l="/vuepress-note/images/手写vue2源码/（二十四）diff算法-比对优化/img1.png",c="/vuepress-note/images/手写vue2源码/（二十四）diff算法-比对优化/img2.png",i="/vuepress-note/images/手写vue2源码/（二十四）diff算法-比对优化/img3.png",n="/vuepress-note/images/手写vue2源码/（二十四）diff算法-比对优化/img4.png",u="/vuepress-note/images/手写vue2源码/（二十四）diff算法-比对优化/img5.png",d="/vuepress-note/images/手写vue2源码/（二十四）diff算法-比对优化/img6.png",r="/vuepress-note/images/手写vue2源码/（二十四）diff算法-比对优化/img7.png",k="/vuepress-note/images/手写vue2源码/（二十四）diff算法-比对优化/img8.png",v="/vuepress-note/images/手写vue2源码/（二十四）diff算法-比对优化/img9.png",m="/vuepress-note/images/手写vue2源码/（二十四）diff算法-比对优化/img10.png",b="/vuepress-note/images/手写vue2源码/（二十四）diff算法-比对优化/img11.png",g="/vuepress-note/images/手写vue2源码/（二十四）diff算法-比对优化/img12.png",h="/vuepress-note/images/手写vue2源码/（二十四）diff算法-比对优化/img13.png",f="/vuepress-note/images/手写vue2源码/（二十四）diff算法-比对优化/img14.png",w="/vuepress-note/images/手写vue2源码/（二十四）diff算法-比对优化/img15.png",y="/vuepress-note/images/手写vue2源码/（二十四）diff算法-比对优化/img16.png",q="/vuepress-note/images/手写vue2源码/（二十四）diff算法-比对优化/img17.png",V="/vuepress-note/images/手写vue2源码/（二十四）diff算法-比对优化/img18.png",x="/vuepress-note/images/手写vue2源码/（二十四）diff算法-比对优化/img19.png",C="/vuepress-note/images/手写vue2源码/（二十四）diff算法-比对优化/img20.png",E="/vuepress-note/images/手写vue2源码/（二十四）diff算法-比对优化/img21.png",_="/vuepress-note/images/手写vue2源码/（二十四）diff算法-比对优化/img22.png",S="/vuepress-note/images/手写vue2源码/（二十四）diff算法-比对优化/img23.png",I="/vuepress-note/images/手写vue2源码/（二十四）diff算法-比对优化/img24.png",j="/vuepress-note/images/手写vue2源码/（二十四）diff算法-比对优化/img25.png",B="/vuepress-note/images/手写vue2源码/（二十四）diff算法-比对优化/img26.png",z="/vuepress-note/images/手写vue2源码/（二十四）diff算法-比对优化/img27.png",T="/vuepress-note/images/手写vue2源码/（二十四）diff算法-比对优化/img28.png",D={},A=e("p",null,"diff 算法 - 比对优化",-1),F=o(`<h2 id="比对儿子节点" tabindex="-1"><a class="header-anchor" href="#比对儿子节点" aria-hidden="true">#</a> 比对儿子节点</h2><h3 id="前文回顾" tabindex="-1"><a class="header-anchor" href="#前文回顾" aria-hidden="true">#</a> 前文回顾</h3><p>上篇，通过构建两个虚拟节点来模拟 v-if 的效果，通过 patch 方法比对实现了外层节点的复用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> vm1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Brave&#39;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> render1 <span class="token operator">=</span> <span class="token function">compileToFunction</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;div style=&quot;color:blue&quot;&gt;{{name}}&lt;/div&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> oldVnode <span class="token operator">=</span> <span class="token function">render1</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>vm1<span class="token punctuation">)</span>
<span class="token keyword">let</span> el1 <span class="token operator">=</span> <span class="token function">createElm</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>el1<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> vm2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;BraveWang&#39;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> render2 <span class="token operator">=</span> <span class="token function">compileToFunction</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;div style=&quot;color:red&quot;&gt;{{name}}&lt;/div&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> newVnode <span class="token operator">=</span> <span class="token function">render2</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>vm2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">patch</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> newVnode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果： 初始化时为蓝色文本 <img src="`+l+'" alt="" loading="lazy"></p><p>更新后变为红色文本 <img src="'+c+`" alt="" loading="lazy"></p><p>发现问题：</p><p>仅更新了外层 div 的 style，但 name 并没有更新为 BraveWang， 即只做了第一层节点的比对和属性更新，没有进行深层的 diff 比对</p><h3 id="如何比对儿子节点" tabindex="-1"><a class="header-anchor" href="#如何比对儿子节点" aria-hidden="true">#</a> 如何比对儿子节点</h3><p>把“新的儿子节点”和“老的儿子节点”都拿出来，依次进行比对</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//src/vdom/patch.js</span>

<span class="token doc-comment comment">/**
 * 将虚拟节点转为真实节点后插入到元素中
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">el</span>    当前真实元素 id#app
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">vnode</span> 虚拟节点
 * <span class="token keyword">@returns</span>         新的真实元素
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">patch</span><span class="token punctuation">(</span><span class="token parameter">oldVnode<span class="token punctuation">,</span> vnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> isRealElement <span class="token operator">=</span> oldVnode<span class="token punctuation">.</span>nodeType<span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>isRealElement<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 1，根据虚拟节点创建真实节点</span>
    <span class="token keyword">const</span> elm <span class="token operator">=</span> <span class="token function">createElm</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2，使用真实节点替换掉老节点</span>
    <span class="token keyword">const</span> parentNode <span class="token operator">=</span> oldVnode<span class="token punctuation">.</span>parentNode<span class="token punctuation">;</span>
    parentNode<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>elm<span class="token punctuation">,</span> oldVnode<span class="token punctuation">.</span>nextSibling<span class="token punctuation">)</span><span class="token punctuation">;</span>
    parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> elm<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment">// diff：新老虚拟节点比对</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isSameVnode</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> oldVnode<span class="token punctuation">.</span>el<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">replaceChild</span><span class="token punctuation">(</span><span class="token function">createElm</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span><span class="token punctuation">,</span> oldVnode<span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> el <span class="token operator">=</span> vnode<span class="token punctuation">.</span>el <span class="token operator">=</span> oldVnode<span class="token punctuation">.</span>el<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>oldVnode<span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>text <span class="token operator">!==</span> vnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> el<span class="token punctuation">.</span>textContent <span class="token operator">=</span> vnode<span class="token punctuation">.</span>text<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">updateProperties</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> oldVnode<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// TODO:比较儿子节点...</span>
    <span class="token keyword">let</span> oldChildren <span class="token operator">=</span> oldVnode<span class="token punctuation">.</span>children <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> newChildren <span class="token operator">=</span> vnode<span class="token punctuation">.</span>children <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="新老儿子节点的几种情况" tabindex="-1"><a class="header-anchor" href="#新老儿子节点的几种情况" aria-hidden="true">#</a> 新老儿子节点的几种情况</h3><blockquote><p>情况 1：老的有儿子，新的没有儿子 情况 2：老的没有儿子，新的有儿子 情况 3：新老都有儿子</p></blockquote><h4 id="情况-1-老的有儿子-新的没有儿子" tabindex="-1"><a class="header-anchor" href="#情况-1-老的有儿子-新的没有儿子" aria-hidden="true">#</a> 情况 1：老的有儿子，新的没有儿子</h4><p>处理方法：直接将多余的老 dom 元素删除即可</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// src/vdom/patch.js#patch</span>

<span class="token operator">...</span>
<span class="token comment">// 比较儿子节点</span>
<span class="token keyword">let</span> oldChildren <span class="token operator">=</span> oldVnode<span class="token punctuation">.</span>children <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> newChildren <span class="token operator">=</span> vnode<span class="token punctuation">.</span>children <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 情况 1：老的有儿子，新的没有儿子；直接将多余的老 dom 元素删除即可；</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>oldChildren<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> newChildren<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">// 更好的处理：由于子节点中可能包含组件，需要封装removeChildNodes方法，将子节点全部删掉</span>
  el<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span><span class="token comment">// 暴力写法直接清空；</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>备注：这里直接清空 innerHTML 是暴力写法；由于子节点中可能包含组件，所以更好的处理方式是封装一个 removeChildNodes 方法，用于删掉全部子节点</p><p>测试方法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> vm1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Brave&#39;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> render1 <span class="token operator">=</span> <span class="token function">compileToFunction</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;div style=&quot;color:blue&quot;&gt;{{name}}&lt;/div&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> oldVnode <span class="token operator">=</span> <span class="token function">render1</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>vm1<span class="token punctuation">)</span>
<span class="token keyword">let</span> el1 <span class="token operator">=</span> <span class="token function">createElm</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>el1<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> vm2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;BraveWang&#39;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> render2 <span class="token operator">=</span> <span class="token function">compileToFunction</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;div style=&quot;color:red&quot;&gt;&lt;/div&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> newVnode <span class="token operator">=</span> <span class="token function">render2</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>vm2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">patch</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> newVnode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="情况-2-老的没有儿子-新的有儿子" tabindex="-1"><a class="header-anchor" href="#情况-2-老的没有儿子-新的有儿子" aria-hidden="true">#</a> 情况 2：老的没有儿子，新的有儿子</h4><p>处理方法：直接将新的儿子节点放入对应的老节点中即可；</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//src/vdom/patch.js#patch</span>

<span class="token operator">...</span>
<span class="token comment">// 比较儿子节点</span>
<span class="token keyword">let</span> oldChildren <span class="token operator">=</span> oldVnode<span class="token punctuation">.</span>children <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> newChildren <span class="token operator">=</span> vnode<span class="token punctuation">.</span>children <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 情况 1：老的有儿子，新的没有儿子；直接将多余的老 dom 元素删除即可；</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>oldChildren<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> newChildren<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  el<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 情况 2：老的没有儿子，新的有儿子；直接将新的儿子节点放入对应的老节点中即可</span>
<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>oldChildren<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> newChildren<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  newChildren<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">child</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token comment">// 注意：这里的child是虚拟节点，需要变为真实节点</span>
    <span class="token keyword">let</span> childElm <span class="token operator">=</span> <span class="token function">createElm</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 根据新的虚拟节点，创建一个真实节点</span>
    el<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>childElm<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将生成的真实节点，放入 dom</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>备注：newChildren 中的 child 为虚拟节点，需要先通过 createElm(child)创建为真实节点</p><p>测试：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> vm1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Brave&#39;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> render1 <span class="token operator">=</span> <span class="token function">compileToFunction</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;div style=&quot;color:blue&quot;&gt;&lt;/div&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> oldVnode <span class="token operator">=</span> <span class="token function">render1</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>vm1<span class="token punctuation">)</span>
<span class="token keyword">let</span> el1 <span class="token operator">=</span> <span class="token function">createElm</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>el1<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> vm2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;BraveWang&#39;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> render2 <span class="token operator">=</span> <span class="token function">compileToFunction</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;div style=&quot;color:red&quot;&gt;{{name}}&lt;/div&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> newVnode <span class="token operator">=</span> <span class="token function">render2</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>vm2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">patch</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> newVnode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="情况-3-新老都有儿子" tabindex="-1"><a class="header-anchor" href="#情况-3-新老都有儿子" aria-hidden="true">#</a> 情况 3：新老都有儿子</h4><p>处理方法：进行 diff 比对</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// src/vdom/patch.js#patch</span>

<span class="token operator">...</span>
<span class="token comment">// 比较儿子节点</span>
<span class="token keyword">let</span> oldChildren <span class="token operator">=</span> oldVnode<span class="token punctuation">.</span>children <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> newChildren <span class="token operator">=</span> vnode<span class="token punctuation">.</span>children <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 情况 1：老的有儿子，新的没有儿子；直接将对于的老 dom 元素干掉即可;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>oldChildren<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> newChildren<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  el<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 情况 2：老的没有儿子，新的有儿子；直接将新的儿子节点放入对应的老节点中即可</span>
<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>oldChildren<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> newChildren<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  newChildren<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">child</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> childElm <span class="token operator">=</span> <span class="token function">createElm</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>
    el<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>childElm<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 情况 3：新老都有儿子</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
  <span class="token comment">// diff 比对的核心逻辑</span>
  <span class="token function">updateChildren</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> oldChildren<span class="token punctuation">,</span> newChildren<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里对“老的有儿子，新的没有儿子”和“老的没有儿子，新的有儿子”两种特殊情况做了特殊的处理接下来，当新老节点都有儿子时，就必须进行 diff 比对了；所以，updateChildren 才是 diff 算法的核心；</p><h2 id="新老儿子-diff-比对的核心逻辑-updatechildren-方法" tabindex="-1"><a class="header-anchor" href="#新老儿子-diff-比对的核心逻辑-updatechildren-方法" aria-hidden="true">#</a> 新老儿子 diff 比对的核心逻辑 updateChildren 方法</h2><h3 id="新老儿子-diff-比对方案介绍" tabindex="-1"><a class="header-anchor" href="#新老儿子-diff-比对方案介绍" aria-hidden="true">#</a> 新老儿子 diff 比对方案介绍</h3><p>继续，当新老节点都有儿子时，就需要对新老儿子节点进行比对了 新老节点的比对方案是：采用头尾双指针的方式，进行新老虚拟节点的依次比对 每次节点比对完成，如果是头节点就向后移动指针，尾节点就向前移动指针；</p><figure><img src="`+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>直至一方遍历完成，比对才结束； 即：&quot;老的头指针和尾指针重合&quot;或&quot;新的头指针和尾指针重合&quot;；</p><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这里，为了能够提升 diff 算法的性能，并不会直接全部采用最耗性能的“乱序比对”</p><p>而是结合了日常使用场景，优先对 4 种特殊情况进行了特殊的除了：头头、尾尾、头尾、尾头</p><blockquote><p>头和头比较，将头指针向后移动； 尾和尾比较，将尾指针向前移动； 头和尾比较，将头指针向后移动，尾指针向前移动； 尾和尾比较，将尾指针向后移动，头指针向前移动；</p></blockquote><p>每次比对时，优先进行头头、尾尾、头尾、尾头的比对尝试，如果都没有命中才会进行乱序比较</p><h3 id="diff-比对的几种特殊情况-头头、尾尾、头尾、尾头" tabindex="-1"><a class="header-anchor" href="#diff-比对的几种特殊情况-头头、尾尾、头尾、尾头" aria-hidden="true">#</a> diff 比对的几种特殊情况（头头、尾尾、头尾、尾头）</h3><p>除了这 4 钟特殊情况外，就只能进行乱序比对了</p><p>虽然是做乱序比对，但目标依然是最大程度实现节点复用，提升渲染性能；</p><h2 id="比对优化" tabindex="-1"><a class="header-anchor" href="#比对优化" aria-hidden="true">#</a> 比对优化</h2><h3 id="节点比对的结束条件" tabindex="-1"><a class="header-anchor" href="#节点比对的结束条件" aria-hidden="true">#</a> 节点比对的结束条件</h3><p>直至新老节点一方遍历完成，比对才结束；</p><p>即：&quot;老的头指针和尾指针重合&quot;或&quot;新的头指针和尾指针重合&quot;；</p><figure><img src="'+n+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>此时，就是循环中最后一次比对了，D 节点比对完成后节点继续后移</p><p>与老节点比对完成后（已经识别了可复用的节点），继续将新增节点 E 添加到老儿子节点中</p><p>代码实现：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// src/vdom/patch.js</span>

<span class="token doc-comment comment">/**
 * 新老都有儿子时做比对，即 diff 算法核心逻辑
 * 备注：采用头尾双指针的方式；优化头头、尾尾、头尾、尾头的特殊情况；
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">el</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">oldChildren</span>  老的儿子节点
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">newChildren</span>  新的儿子节点
 */</span>
<span class="token keyword">function</span> <span class="token function">updateChildren</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> oldChildren<span class="token punctuation">,</span> newChildren</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">// 声明头尾指针</span>
    <span class="token keyword">let</span> oldStartIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> oldStartVnode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> oldEndIndex <span class="token operator">=</span> oldChildren<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> oldEndVnode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span>oldEndIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> newStartIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> newStartVnode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> newEndIndex <span class="token operator">=</span> newChildren<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> newEndVnode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span>newEndIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">// 循环结束条件：有一方遍历完了就结束；即&quot;老的头指针和尾指针重合&quot;或&quot;新的头指针和尾指针重合&quot;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>oldStartIndex <span class="token operator">&lt;=</span> oldEndIndex <span class="token operator">&amp;&amp;</span> newStartIndex <span class="token operator">&lt;=</span> newEndIndex<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 1，优先做4种特殊情况比对：头头、尾尾、头尾、尾头</span>
        <span class="token comment">// 2，如果没有命中，采用乱序比对</span>
        <span class="token comment">// 3，比对完成后移动指针，继续下一轮比对</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 比对完成后</span>
    <span class="token comment">// 新的多，插入新增节点，删除多余节点</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>备注：由于 diff 算法采用了 while 循环处理，所以复杂度为 O(n)</p><h3 id="情况-1-新儿子比老儿子多-插入新增的" tabindex="-1"><a class="header-anchor" href="#情况-1-新儿子比老儿子多-插入新增的" aria-hidden="true">#</a> 情况 1：新儿子比老儿子多，插入新增的</h3><p>分为“从头部开始移动指针”和“从尾部部开始移动指针”两种情况</p><h4 id="从头部开始移动指针" tabindex="-1"><a class="header-anchor" href="#从头部开始移动指针" aria-hidden="true">#</a> 从头部开始移动指针</h4><p>头头比对：</p><p>第一次比配，匹配后移动新老头指针： <img src="`+u+'" alt="" loading="lazy"></p><p>第二次匹配，匹配后移动新老头指针： <img src="'+d+'" alt="" loading="lazy"></p><p>直至老节点的头尾指针重合，此时，D 节点是 while 最后一次做比对： <img src="'+r+'" alt="" loading="lazy"></p><p>比对完成后，指针继续后移，导致老节点的头指针越过尾指针，此时 while 循环结束；</p><p>while 循环结束时的指针状态如下： <img src="'+k+`" alt="" loading="lazy"></p><p>此时，新节点的头指针指向的节点 E 为新增节点，后面可能还有 F G H 等新增节点，需要将它们（ 指从 newStartIndex 到 newEndIndex 所有节点），添加到老节点儿子集合中</p><p>代码实现：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">while</span><span class="token punctuation">(</span>oldStartIndex <span class="token operator">&lt;=</span> oldEndIndex <span class="token operator">&amp;&amp;</span> newStartIndex <span class="token operator">&lt;=</span> newEndIndex<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 头头比对：</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isSameVnode</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">,</span> newStartVnode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// isSameVnode只能判断标签和key一样，但属性可能还有不同</span>
        <span class="token comment">// 所以需要patch方法递归更新新老虚拟节点的属性</span>
        <span class="token function">patch</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">,</span> newStartVnode<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 更新新老头指针和新老头节点</span>
        oldStartVnode <span class="token operator">=</span> oldStartVnode<span class="token punctuation">[</span><span class="token operator">++</span>oldStartIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
        newStartVnode <span class="token operator">=</span> newStartVnode<span class="token punctuation">[</span><span class="token operator">++</span>newStartIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 1，新的多，插入新增的</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>newStartIndex <span class="token operator">&lt;=</span> newEndIndex<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 新的开始指针和新的结束指针之间的节点</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> newStartIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> newEndIndex<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
       <span class="token comment">// 获取对应的虚拟节点，并生成真实节点，添加到 dom 中</span>
       el<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">createElm</span><span class="token punctuation">(</span>newChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>h
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试效果：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> render1 <span class="token operator">=</span> <span class="token function">compileToFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div&gt;
    &lt;li key=&quot;A&quot;&gt;A&lt;/li&gt;
    &lt;li key=&quot;B&quot;&gt;B&lt;/li&gt;
    &lt;li key=&quot;C&quot;&gt;C&lt;/li&gt;
    &lt;li key=&quot;D&quot;&gt;D&lt;/li&gt;
&lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> render2 <span class="token operator">=</span> <span class="token function">compileToFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div&gt;
    &lt;li key=&quot;A&quot; style=&quot;color:red&quot;&gt;A&lt;/li&gt;
    &lt;li key=&quot;B&quot; style=&quot;color:blue&quot;&gt;B&lt;/li&gt;
    &lt;li key=&quot;C&quot; style=&quot;color:yellow&quot;&gt;C&lt;/li&gt;
    &lt;li key=&quot;D&quot; style=&quot;color:pink&quot;&gt;D&lt;/li&gt;
    &lt;li key=&quot;E&quot;&gt;E&lt;/li&gt;
    &lt;li key=&quot;F&quot;&gt;F&lt;/li&gt;
&lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更新前： <img src="`+v+'" alt="" loading="lazy"></p><p>更新后：</p><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>备注： 将新儿子中新增的节点直接向后添加到老儿子集合中，使用 appendChild 即可 但是，如果新增的节点在头部，就不能用 appendChild 了，见下面尾尾比对分析；</p><h4 id="从尾部开始移动指针" tabindex="-1"><a class="header-anchor" href="#从尾部开始移动指针" aria-hidden="true">#</a> 从尾部开始移动指针</h4><p>尾尾比对： <img src="'+b+'" alt="" loading="lazy"></p><p>指针向前移动，当老节点的头尾指针重合，即 while 循环的最后一次比对： <img src="'+g+'" alt="" loading="lazy"></p><p>比对完成指针向前移动后，循环结束时的指针状态如下： <img src="'+h+'" alt="" loading="lazy"></p><p>while 比对完成后，需要将剩余新节点添加到老儿子中的对应位置 <img src="'+f+'" alt="" loading="lazy"></p><p>问题：如何向头部位置新增节点 问题：如何将新增节点 E、F 放到 A 的前面？</p><p>分析：</p><ol><li>要加到 A 节点前，不能继续使用 appendChild 向后追加节点</li><li>前面的代码是指“从新的头指针到新的尾指针”这一区间的节点，即 for (let i = newStartIndex; i &lt;= newEndIndex; i++) 所以是先处理 E 节点，在处理 F 节点</li></ol><p>先处理 E 节点，将 E 节点方到 A 节点前的位置： <img src="'+w+'" alt="" loading="lazy"></p><p>再处理 F 节点，将 F 节点插入到 A 节点与 E 节点之间的位置： <img src="'+y+'" alt="" loading="lazy"></p><p>当新增区域的头尾指针重合，即为最后一次处理；</p><p>方案：</p><p>新增节点有可能追加到后面，也有可能插入到前面</p><ol><li>头头比较时，将新增节点添加到老儿子集合中即可，使用 appendChild 追加</li><li>尾尾比较时，</li></ol><p>如何确认该向前还是向后添加节点？</p><p>要看 while 循环结束时，newChildren[newEndIndex + 1]新儿子的尾指针是否有节点 <img src="'+q+`" alt="" loading="lazy"></p><ol><li>如果有节点，说明是从尾向头进行比对的，新增节需要点添加到老儿子集合前面，使用 insertBefore 插入指定位置</li><li>如果无节点，说明是从头向尾进行比对的，新增节需要点追加到老儿子集合后面，使用 appendChild 追加</li></ol><p>代码实现：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1，新的多（以新指针为参照）插入新增</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>newStartIndex <span class="token operator">&lt;=</span> newEndIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 新的开始指针和新的结束指针之间的节点</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> newStartIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> newEndIndex<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 判断当前尾节点的下一个元素是否存在：</span>
    <span class="token comment">//  1，如果存在：则插入到下一个元素的前面</span>
    <span class="token comment">//  2，如果不存在（下一个是 null） ：就是 appendChild</span>
    <span class="token comment">// 取参考节点 anchor:决定新节点放到前边还是后边</span>
    <span class="token comment">//  逻辑：取去newChildren的尾部+1,判断是否为 null</span>
    <span class="token comment">//  解释：如果有值说明是向前移动的，取出此虚拟元素的真实节点el，将新节点添加到此真实节点前即可</span>
    <span class="token keyword">let</span> anchor <span class="token operator">=</span> newChildren<span class="token punctuation">[</span>newEndIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> newChildren<span class="token punctuation">[</span>newEndIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>el
    <span class="token comment">// 获取对应的虚拟节点，并生成真实节点，添加到 dom 中</span>
    <span class="token comment">// el.appendChild(createElm(newChildren[i]))</span>
    <span class="token comment">// 逻辑合并:将 appendChild 改为 insertBefore</span>
    <span class="token comment">//  效果：既有appendChild又有insertBefore的功能，直接将参考节点放进来即可;</span>
    <span class="token comment">//  解释：对于insertBefore方法,如果anchor为null，等同于appendChild;如果有值，则是insertBefore;</span>
    el<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span><span class="token function">createElm</span><span class="token punctuation">(</span>newChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>anchor<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>备注：注意这里的 el.insertBefore 妙用，当 insertBefore 方法的第二个参数为 null 时，等同于 appendChild 方法</p><h3 id="情况-2-老儿子比新儿子多-删除多余" tabindex="-1"><a class="header-anchor" href="#情况-2-老儿子比新儿子多-删除多余" aria-hidden="true">#</a> 情况 2：老儿子比新儿子多，删除多余</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> render1 <span class="token operator">=</span> <span class="token function">compileToFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div&gt;
    &lt;li key=&quot;A&quot; style=&quot;color:red&quot;&gt;A&lt;/li&gt;
    &lt;li key=&quot;B&quot; style=&quot;color:blue&quot;&gt;B&lt;/li&gt;
    &lt;li key=&quot;C&quot; style=&quot;color:yellow&quot;&gt;C&lt;/li&gt;
    &lt;li key=&quot;D&quot; style=&quot;color:pink&quot;&gt;D&lt;/li&gt;
&lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> render2 <span class="token operator">=</span> <span class="token function">compileToFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div&gt;
    &lt;li key=&quot;A&quot; style=&quot;color:red&quot;&gt;A&lt;/li&gt;
    &lt;li key=&quot;B&quot; style=&quot;color:blue&quot;&gt;B&lt;/li&gt;
    &lt;li key=&quot;C&quot; style=&quot;color:yellow&quot;&gt;C&lt;/li&gt;
&lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+V+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>老的比新的多，在移动过程中就会出现：新的已经到头了时，老的还有</p><p>当移动结束时：老的头指针会和尾指针重合，新的头指针会越过新的尾指针</p><figure><img src="'+x+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>代码实现：</p><p>将老儿子集合，“从头指针到尾指针”区域的多余真实节点删除</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 2，老儿子比新儿子多，（以旧指针为参照）删除多余的真实节点</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>oldStartIndex <span class="token operator">&lt;=</span> oldEndIndex<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> oldStartIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> oldEndIndex<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> child <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    el<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="情况-3-反序情况" tabindex="-1"><a class="header-anchor" href="#情况-3-反序情况" aria-hidden="true">#</a> 情况 3：反序情况</h3><p>反序情况 <img src="`+C+'" alt="" loading="lazy"></p><p>这种情况下，可以使用“旧的头指针”和“新的尾指针”进行比较，即头尾比较 <img src="'+E+'" alt="" loading="lazy"></p><p>每次比较完成后，“旧的头指针”向后移动，“新的尾指针”向前移动 <img src="'+_+'" alt="" loading="lazy"></p><p>并且比较完成后，直接将老节点 A 放到老节点最后去 更确切的说，是插入到尾指针的下一个节点的前面（移动前，尾指针指向的 D 节点的下一个节点为 null）</p><p>继续比较 B，比较完成后移动指针 移动 B ：插入到尾指针的下一个的前面（这时尾指针 D 的下一个是上一次移动过来的 A） <img src="'+S+'" alt="" loading="lazy"></p><p>继续 C 和 C 比，之后再移动指针： 移动 C ：插入到尾指针的下一个的前面（这时尾指针 D 的下一个是上一次移动过来的 B） <img src="'+I+`" alt="" loading="lazy"></p><p>接下来比较 D，此时会发现“旧的头指针”和“新的头指针”一样了，都是 D</p><p>这时就比较完成了，D 无需再移动，结果就是 D C B A（整个反序过程，共移动了 3 次，移动而不是重新创建）</p><p>所以，对于反序操作来说，需要去比对头尾指针（老的头和新的尾），</p><p>每次比对完成后头指针向后移，尾指针向左移</p><p>代码部分，添加“头尾比较”逻辑：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>oldStartIndex <span class="token operator">&lt;=</span> oldEndIndex <span class="token operator">&amp;&amp;</span> newStartIndex <span class="token operator">&lt;=</span> newEndIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSameVnode</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">,</span> newStartVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">patch</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">,</span> newStartVnode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    oldStartVnode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span><span class="token operator">++</span>oldStartIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
    newStartVnode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span><span class="token operator">++</span>newStartIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isSameVnode</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">,</span> newEndVnode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">patch</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">,</span> newEndVnode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    oldEndVnode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span><span class="token operator">--</span>oldEndIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
    newEndVnode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span><span class="token operator">--</span>newEndIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// 头尾比较：老的头节点和新的尾节点做对比</span>
  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isSameVnode</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">,</span> newEndVnode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// patch方法只会duff比较并更新属性，但元素的位置不会变化</span>
    <span class="token function">patch</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">,</span> newEndVnode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// diff:包括递归比儿子</span>
    <span class="token comment">// 移动节点：将当前的节点插入到最后一个节点的下一个节点的前面去</span>
    el<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">.</span>el<span class="token punctuation">,</span> oldEndVnode<span class="token punctuation">.</span>el<span class="token punctuation">.</span>nextSibling<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 移动指针</span>
    oldStartVnode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span><span class="token operator">++</span>oldStartIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
    newEndVnode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span><span class="token operator">--</span>newEndIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p><p>要先插入节点，再移动指针 insertBefore 是有移动效果的，会把原来的节点移走，这时 dom 的移动性 appendChild、insertBefore 操作 dom 都有移动性，都会吧原来的 dom 移走</p><p>测试效果： 更新前： <img src="`+j+'" alt="" loading="lazy"></p><p>更新后： <img src="'+B+`" alt="" loading="lazy"></p><p>同理尾头比对的情况：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>oldStartIndex <span class="token operator">&lt;=</span> oldEndIndex <span class="token operator">&amp;&amp;</span> newStartIndex <span class="token operator">&lt;=</span> newEndIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSameVnode</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">,</span> newStartVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">patch</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">,</span> newStartVnode<span class="token punctuation">)</span><span class="token punctuation">;</span>
      oldStartVnode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span><span class="token operator">++</span>oldStartIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
      newStartVnode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span><span class="token operator">++</span>newStartIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isSameVnode</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">,</span> newEndVnode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token function">patch</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">,</span> newEndVnode<span class="token punctuation">)</span><span class="token punctuation">;</span>
      oldEndVnode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span><span class="token operator">--</span>oldEndIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
      newEndVnode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span><span class="token operator">--</span>newEndIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isSameVnode</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">,</span> newEndVnode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token function">patch</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">,</span> newEndVnode<span class="token punctuation">)</span><span class="token punctuation">;</span>
      el<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">.</span>el<span class="token punctuation">,</span> oldEndVnode<span class="token punctuation">.</span>el<span class="token punctuation">.</span>nextSibling<span class="token punctuation">)</span><span class="token punctuation">;</span>
      oldStartVnode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span><span class="token operator">++</span>oldStartIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
      newEndVnode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span><span class="token operator">--</span>newEndIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// 尾头比较</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isSameVnode</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">,</span> newStartVnode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token function">patch</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">,</span> newStartVnode<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// patch方法只会更新属性，元素的位置不会变化</span>
      <span class="token comment">// 移动节点:将老的尾节点移动到老的头节点前面去</span>
      el<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">.</span>el<span class="token punctuation">,</span> oldStartVnode<span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将尾部插入到头部</span>
      <span class="token comment">// 移动指针</span>
      oldEndVnode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span><span class="token operator">--</span>oldEndIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
      newStartVnode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span><span class="token operator">++</span>newStartIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试效果：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> render1 <span class="token operator">=</span> <span class="token function">compileToFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div&gt;
    &lt;li key=&quot;E&quot;&gt;E&lt;/li&gt;
    &lt;li key=&quot;A&quot;&gt;A&lt;/li&gt;
    &lt;li key=&quot;B&quot;&gt;B&lt;/li&gt;
    &lt;li key=&quot;C&quot;&gt;C&lt;/li&gt;
    &lt;li key=&quot;D&quot;&gt;D&lt;/li&gt;
&lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> render2 <span class="token operator">=</span> <span class="token function">compileToFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div&gt;
    &lt;li key=&quot;D&quot; style=&quot;color:pink&quot;&gt;D&lt;/li&gt;
    &lt;li key=&quot;C&quot; style=&quot;color:yellow&quot;&gt;C&lt;/li&gt;
    &lt;li key=&quot;B&quot; style=&quot;color:blue&quot;&gt;B&lt;/li&gt;
    &lt;li key=&quot;A&quot; style=&quot;color:red&quot;&gt;A&lt;/li&gt;
&lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更新前： <img src="`+z+'" alt="" loading="lazy"></p><p>更新后： <img src="'+T+'" alt="" loading="lazy"></p>',122);function N(H,W){return a(),t("div",null,[A,p(" more "),F])}const M=s(D,[["render",N],["__file","（二十四）diff算法-比对优化.html.vue"]]);export{M as default};
