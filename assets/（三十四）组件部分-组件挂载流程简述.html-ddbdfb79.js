import{_ as n,W as s,X as a,Y as t,Z as p,$ as e}from"./framework-d2dfa12e.js";const o="/vuepress-note/images/手写vue2源码/（三十四）组件部分-组件挂载流程简述/img1.png",l={},c=p("p",null,"组件部分-组件挂载流程分析",-1),i=e(`<h2 id="组件挂载流程分析" tabindex="-1"><a class="header-anchor" href="#组件挂载流程分析" aria-hidden="true">#</a> 组件挂载流程分析</h2><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h3><p>全局组件：my-button，name：&#39;全局组件&#39;；</p><p>局部组件：my-button；name：&#39;局部组件&#39;；</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;app&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>my<span class="token operator">-</span>button<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>my<span class="token operator">-</span>button<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&quot;/dist/vue.js&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
    <span class="token comment">// 全局组件</span>
    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;my-button&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;my-button&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token string">&#39;&lt;button&gt;Hello Vue {{name}}&lt;/button&gt;&#39;</span><span class="token punctuation">,</span>
      <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;全局组件&#39;</span><span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&quot;#app&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">{</span> <span class="token comment">// 局部组件</span>
        <span class="token string-property property">&#39;my-button&#39;</span><span class="token operator">:</span><span class="token punctuation">{</span>
          <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token string">&#39;&lt;button&gt;Hello Vue {{name}}&lt;/button&gt;&#39;</span><span class="token punctuation">,</span>
          <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;局部组件&#39;</span><span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="组件的挂载流程" tabindex="-1"><a class="header-anchor" href="#组件的挂载流程" aria-hidden="true">#</a> 组件的挂载流程</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// src/init.js</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">initMixin</span><span class="token punctuation">(</span><span class="token parameter">Vue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 初始化</span>
  <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_init</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>

    vm<span class="token punctuation">.</span>$options <span class="token operator">=</span> <span class="token function">mergeOptions</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>options<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">initState</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      vm<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">$mount</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> opts <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">;</span>
    el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>
    vm<span class="token punctuation">.</span>$el <span class="token operator">=</span> el<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>opts<span class="token punctuation">.</span>render<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> template <span class="token operator">=</span> opts<span class="token punctuation">.</span>template<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>template<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        template <span class="token operator">=</span> el<span class="token punctuation">.</span>outerHTML<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">let</span> render <span class="token operator">=</span> <span class="token function">compileToFunction</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span><span class="token punctuation">;</span>
      opts<span class="token punctuation">.</span>render <span class="token operator">=</span> render<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">mountComponent</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$nextTick <span class="token operator">=</span> nextTick<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一次进入，为根节点初始化，el 为 #app；</p><figure><img src="`+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>第二次进入，组件的初始化，el 为 undefined；</p><ul><li>继续，进行组件的挂载操作 mountComponent：</li><li>组件的挂载：核心是创造出一个组件的虚拟节点，并调用他的更新方法 _update：</li><li>render.call 创造组件的虚拟节点 vnode，即 button 的虚拟节点：</li><li>vm.render 执行完成后，继续执行 _update 方法：</li><li>这时，不能获取到上一次的虚拟节点：</li><li>当组件挂载时，$patch 方法中的 el 为 null；</li><li>此时，patch 内部判断了，如果 oldVnode 为 null，就使用组件的虚拟节点，创建出组件的真实节点：</li><li>此时，返回的 vm.$el 就是 button 内部包含着内容：</li><li>此时，子组件就挂载完毕了！</li><li>vnode.componentInstance 存在，说明是组件，createComponent 方法返回 true：</li><li>createElm 方法中，返回组件的 $el，即组件对应的真实节点 button：</li><li>createElm 递归处理，将生成的组件真实节点，放到对应的父节点上；</li><li>再将完整的 div 挂在到页面上</li></ul><h2 id="完成流程" tabindex="-1"><a class="header-anchor" href="#完成流程" aria-hidden="true">#</a> 完成流程</h2><ol><li><p>实现了 Vue.component，它的核心功能是注册成全局组件； 内部会自动调用 Vue.extend 方法，返回组件的构造函数；</p></li><li><p>在组件初始化时，会做组件的合并； mergeOptions 先找自己的局部组件，然后再通过链继续向上找全局组件；</p></li><li><p>合并完成之后，内部会对模板进行编译操作，最终会走到_c（&#39;组件名&#39;） 做标签筛查，创建组件虚拟节点；若 Ctor 为对象，需要使用 Vue.extend 处理为组件的构造函数； 所以，所有的组件都是通过 Vue.extend 方法来实现的；</p></li><li><p>创建组件的真实节点</p></li></ol><ul><li>通过 new Ctor 得到组件实例；</li><li>组件实例调用 $mount 方法：生成组件的真实节点 $el，对应组件模板渲染后的结果</li><li>通过 vnode.componentInstance = new Ctor() 使后面可以拿到组件渲染后的结果： vnode.componentInstance.$el</li></ul><ol start="5"><li><p>将组件的 vnode.componentInstance.$el 插入到父标签中</p></li><li><p>在 new Ctor() 组件实例化时，会执行组件初始化流程，为组件添加独立的渲染过程；</p></li></ol><ul><li>每个组件实例都拥有独立的渲染 watcher；</li><li>当组件渲染时，组件对应的属性会收集自己的渲染 watcher；</li><li>当组件更新时，只需更新组件对应的渲染 watcher 即可；</li><li>所以，组件是局部更新的，性能也会比较好</li></ul>',16);function u(r,k){return s(),a("div",null,[c,t(" more "),i])}const v=n(l,[["render",u],["__file","（三十四）组件部分-组件挂载流程简述.html.vue"]]);export{v as default};
