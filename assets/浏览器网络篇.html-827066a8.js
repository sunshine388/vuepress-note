import{_ as l,W as p,X as o,Y as i,Z as n,a0 as s,a1 as e,$ as a,C as c}from"./framework-d2dfa12e.js";const r={},u=n("p",null,"浏览器网络篇",-1),d=a(`<h2 id="http-的几种请求方法用途" tabindex="-1"><a class="header-anchor" href="#http-的几种请求方法用途" aria-hidden="true">#</a> HTTP 的几种请求方法用途</h2><ul><li>GET 方法 发送一个请求来取得服务器上的某一资源</li><li>POST 方法 向 URL 指定的资源提交数据或附加新的数据</li><li>PUT 方法 跟 POST 方法很像，也是想服务器提交数据。但是，它们之间有不同。 PUT 指定了资源在服务器上的位置，而 POST 没有</li><li>HEAD 方法 只请求页面的首部</li><li>DELETE 方法 删除服务器上的某资源</li><li>OPTIONS 方法 它用于获取当前 URL 所支持的方法。如果请求成功，会有一个 Allow 的头包含类似 “GET,POST” 这样的信息</li><li>TRACE 方法 TRACE 方法被用于激发一个远程的，应用层的请求消息回路</li><li>CONNECT 方法 把请求连接转换到透明的 TCP/IP 通道</li></ul><h2 id="说说从输入-url-到看到页面发生的全过程-越详细越好" tabindex="-1"><a class="header-anchor" href="#说说从输入-url-到看到页面发生的全过程-越详细越好" aria-hidden="true">#</a> 说说从输入 URL 到看到页面发生的全过程，越详细越好</h2><ul><li>首先浏览器主进程接管，开了一个下载线程。</li><li>然后进行 HTTP 请求（DNS 查询、IP 寻址等等），中间会有三次捂手，等待响应，开始下载响应报文。</li><li>将下载完的内容转交给 Renderer 进程管理。</li><li>Renderer 进程开始解析 css rule tree 和 dom tree，这两个过程是并行的，所以一般我会把 link 标签放在页面顶部。</li><li>解析绘制过程中，当浏览器遇到 link 标签或者 script、img 等标签，浏览器会去下载这些内容，遇到时候缓存的使用缓存，不适用缓存的重新下载资源。</li><li>css rule tree 和 dom tree 生成完了之后，开始合成 render tree，这个时候浏览器会进行 layout，开始计算每一个节点的位置，然后进行绘制。</li><li>绘制结束后，关闭 TCP 连接，过程有四次挥手</li></ul><h2 id="从浏览器地址栏输入-url-到显示页面的步骤" tabindex="-1"><a class="header-anchor" href="#从浏览器地址栏输入-url-到显示页面的步骤" aria-hidden="true">#</a> 从浏览器地址栏输入 url 到显示页面的步骤</h2><p><strong>基础版本</strong></p><ul><li>浏览器根据请求的 URL 交给 DNS 域名解析，找到真实 IP ，向服务器发起请求；</li><li>服务器交给后台处理完成后返回数据，浏览器接收文件（ HTML、JS、CSS 、图象等）；</li><li>浏览器对加载到的资源（ HTML、JS、CSS 等）进行语法解析，建立相应的内部数据结构（如 HTML 的 DOM ）；</li><li>载入解析到的资源文件，渲染页面，完成。</li></ul><p><strong>详细版</strong></p><ol><li><p>在浏览器地址栏输入 URL</p></li><li><p>浏览器查看缓存，如果请求资源在缓存中并且新鲜，跳转到转码步骤</p><ol><li>如果资源未缓存，发起新请求</li><li>如果已缓存，检验是否足够新鲜，足够新鲜直接提供给客户端，否则与服务器进行验证。</li><li>检验新鲜通常有两个 HTTP 头进行控制 Expires 和 Cache-Control ：</li></ol><ul><li>HTTP1.0 提供 Expires，值为一个绝对时间表示缓存新鲜日期</li><li>HTTP1.1 增加了 Cache-Control: max-age=,值为以秒为单位的最大新鲜时间</li></ul></li><li><p>浏览器解析 URL 获取协议，主机，端口，path</p></li><li><p>浏览器组装一个 HTTP（GET）请求报文</p></li><li><p>浏览器获取主机 ip 地址，过程如下：</p><ol><li>浏览器缓存</li><li>本机缓存</li><li>hosts 文件</li><li>路由器缓存</li><li>ISP DNS 缓存</li><li>DNS 递归查询（可能存在负载均衡导致每次 IP 不一样）</li></ol></li><li><p>打开一个 socket 与目标 IP 地址，端口建立 TCP 链接，三次握手如下：</p><ol><li>客户端发送一个 TCP 的 SYN=1，Seq=X 的包到服务器端口</li><li>服务器发回 SYN=1， ACK=X+1， Seq=Y 的响应包</li><li>客户端发送 ACK=Y+1， Seq=Z</li></ol></li><li><p>TCP 链接建立后发送 HTTP 请求</p></li><li><p>服务器接受请求并解析，将请求转发到服务程序，如虚拟主机使用 HTTP Host 头部判断请求的服务程序</p></li><li><p>服务器检查 HTTP 请求头是否包含缓存验证信息如果验证缓存新鲜，返回 304 等对应状态码</p></li><li><p>处理程序读取完整请求并准备 HTTP 响应，可能需要查询数据库等操作</p></li><li><p>服务器将响应报文通过 TCP 连接发送回浏览器</p></li><li><p>浏览器接收 HTTP 响应，然后根据情况选择关闭 TCP 连接或者保留重用，关闭 TCP 连接的四次握手如下：</p><ol><li>主动方发送 Fin=1， Ack=Z， Seq= X 报文</li><li>被动方发送 ACK=X+1， Seq=Z 报文</li><li>被动方发送 Fin=1， ACK=X， Seq=Y 报文</li><li>主动方发送 ACK=Y， Seq=X 报文</li></ol></li><li><p>浏览器检查响应状态吗：是否为 1XX，3XX， 4XX， 5XX，这些情况处理与 2XX 不同</p></li><li><p>如果资源可缓存，进行缓存</p></li><li><p>对响应进行解码（例如 gzip 压缩）</p></li><li><p>根据资源类型决定如何处理（假设资源为 HTML 文档）</p></li><li><p>解析 HTML 文档，构件 DOM 树，下载资源，构造 CSSOM 树，执行 js 脚本，这些操作没有严格的先后顺序，以下分别解释</p></li><li><p>构建 DOM 树：</p><ol><li>Tokenizing：根据 HTML 规范将字符流解析为标记</li><li>Lexing：词法分析将标记转换为对象并定义属性和规则</li><li>DOM construction：根据 HTML 标记关系将对象组成 DOM 树</li></ol></li><li><p>解析过程中遇到图片、样式表、js 文件，启动下载</p></li><li><p>构建 CSSOM 树：</p><ol><li>Tokenizing：字符流转换为标记流</li><li>Node：根据标记创建节点</li><li>CSSOM：节点创建 CSSOM 树</li></ol></li><li><p>根据 DOM 树和 CSSOM 树构建渲染树 :</p><ol><li>从 DOM 树的根节点遍历所有可见节点，不可见节点包括：1） script , meta 这样本身不可见的标签。2)被 css 隐藏的节点，如 display: none</li><li>对每一个可见节点，找到恰当的 CSSOM 规则并应用</li><li>发布可视节点的内容和计算样式</li></ol></li><li><p>js 解析如下：</p><ol><li>浏览器创建 Document 对象并解析 HTML，将解析到的元素和文本节点添加到文档中，此 时 document.readystate 为 loading</li><li>HTML 解析器遇到没有 async 和 defer 的 script 时，将他们添加到文档中，然后执行行内或 外部脚本。这些脚本会同步执行，并且在脚本下载和执行时解析器会暂停。这样就可以用 document.write()把文本插入到输入流中。同步脚本经常简单定义函数和注册事件处理程序，他们可以遍历和操作 script 和他们之前的文档内容</li><li>当解析器遇到设置了 async 属性的 script 时，开始下载脚本并继续解析文档。脚本会在它下载完成后尽快执行，但是解析器不会停下来等它下载。异步脚本禁止使用 document.write()，它们可以访问自己 script 和之前的文档元素</li><li>当文档完成解析，document.readState 变成 interactive</li><li>所有 defer 脚本会按照在文档出现的顺序执行，延迟脚本能访问完整文档树，禁止使用 document.write()</li><li>浏览器在 Document 对象上触发 DOMContentLoaded 事件</li><li>此时文档完全解析完成，浏览器可能还在等待如图片等内容加载，等这些内容完成载入并且所有异步脚本完成载入和执行，document.readState 变为 complete，window 触发 load 事件</li></ol></li><li><p>显示页面（HTML 解析过程中会逐步显示页面）</p></li></ol><p><strong>详细简版</strong></p><ol><li>从浏览器接收 url 到开启网络请求线程（这一部分可以展开浏览器的机制以及进程与线程之间的关系）</li><li>开启网络线程到发出一个完整的 HTTP 请求（这一部分涉及到 dns 查询， TCP/IP 请求，五层因特网协议栈等知识）</li><li>从服务器接收到请求到对应后台接收到请求（这一部分可能涉及到负载均衡，安全拦截以及后台内部的处理等等）</li><li>后台和前台的 HTTP 交互（这一部分包括 HTTP 头部、响应码、报文结构、 cookie 等知识，可以提下静态资源的 cookie 优化，以及编码解码，如 gzip 压缩等）</li><li>单独拎出来的缓存问题， HTTP 的缓存（这部分包括 http 缓存头部， ETag ， catchcontrol 等）</li><li>浏览器接收到 HTTP 数据包后的解析流程（解析 html -词法分析然后解析成 dom 树、解析 css 生成 css 规则树、合并成 render 树，然后 layout 、 painting 渲染、复合图层的合成、 GPU 绘制、外链资源的处理、 loaded 和 DOMContentLoaded 等）</li><li>CSS 的可视化格式模型（元素的渲染规则，如包含块，控制框， BFC ， IFC 等概念）</li><li>JS 引擎解析过程（ JS 的解释阶段，预处理阶段，执行阶段生成执行上下文， VO ，作用域链、回收机制等等）</li><li>其它（可以拓展不同的知识模块，如跨域，web 安全， hybrid 模式等等内容）</li></ol><h2 id="http-状态码及其含义" tabindex="-1"><a class="header-anchor" href="#http-状态码及其含义" aria-hidden="true">#</a> HTTP 状态码及其含义</h2><ul><li>1XX ：信息状态码 <ul><li>100 Continue 继续，一般在发送 post 请求时，已发送了 http header 之后服务端将返回此信息，表示确认，之后发送具体参数信息</li></ul></li><li>2XX ：成功状态码 <ul><li>200 OK 正常返回信息</li><li>201 Created 请求成功并且服务器创建了新的资源</li><li>202 Accepted 服务器已接受请求，但尚未处理</li></ul></li><li>3XX ：重定向 <ul><li>301 Moved Permanently 请求的网页已永久移动到新位置。</li><li>302 Found 临时性重定向。</li><li>303 See Other 临时性重定向，且总是使用 GET 请求新的 URI 。</li><li>304 Not Modified 自从上次请求后，请求的网页未修改过。</li></ul></li><li>4XX ：客户端错误 <ul><li>400 Bad Request 服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。</li><li>401 Unauthorized 请求未授权。</li><li>403 Forbidden 禁止访问。</li><li>404 Not Found 找不到如何与 URI 相匹配的资源。</li></ul></li><li>5XX: 服务器错误 <ul><li>500 Internal Server Error 最常见的服务器端错误。</li><li>503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）。</li></ul></li></ul><h2 id="介绍一下你对浏览器内核的理解" tabindex="-1"><a class="header-anchor" href="#介绍一下你对浏览器内核的理解" aria-hidden="true">#</a> 介绍一下你对浏览器内核的理解？</h2><ul><li>主要分成两部分：渲染引擎( layout engineer 或 Rendering Engine )和 JS 引擎</li><li>渲染引擎：负责取得网页的内容（ HTML 、 XML 、图像等等）、整理讯息（例如加入 CSS 等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核</li><li>JS 引擎则：解析和执行 javascript 来实现网页的动态效果</li><li>最开始渲染引擎和 JS 引擎并没有区分的很明确，后来 JS 引擎越来越独立，内核就倾向于只指渲染引擎</li></ul><h2 id="你做的页面在哪些流览器测试过-这些浏览器的内核分别是什么" tabindex="-1"><a class="header-anchor" href="#你做的页面在哪些流览器测试过-这些浏览器的内核分别是什么" aria-hidden="true">#</a> 你做的页面在哪些流览器测试过？这些浏览器的内核分别是什么</h2><ul><li>IE : trident 内核</li><li>Firefox ： gecko 内核</li><li>Safari : webkit 内核</li><li>Opera :以前是 presto 内核， Opera 现已改用 Google - Chrome 的 Blink 内核</li><li>Chrome:Blink (基于 webkit ，Google 与 Opera Software 共同开发)</li></ul><h2 id="html5-的离线储存怎么使用-工作原理能不能解释一下" tabindex="-1"><a class="header-anchor" href="#html5-的离线储存怎么使用-工作原理能不能解释一下" aria-hidden="true">#</a> HTML5 的离线储存怎么使用，工作原理能不能解释一下</h2><ul><li>在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件</li><li>原理： HTML5 的离线存储是基于一个新建的 .appcache 文件的缓存机制(不是存储技术)，通过这个文件上的解析清单离线存储资源，这些资源就会像 cookie 一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示</li><li>如何使用： <ul><li>页面头部像下面一样加入一个 manifest 的属性；</li><li>在 cache.manifest 文件的编写离线存储的资源</li><li>在离线状态时，操作 window.applicationCache 进行需求实现</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">CACHE</span> <span class="token constant">MANIFEST</span>
#v0<span class="token punctuation">.</span><span class="token number">11</span>
<span class="token constant">CACHE</span><span class="token operator">:</span>
js<span class="token operator">/</span>app<span class="token punctuation">.</span>js
css<span class="token operator">/</span>style<span class="token punctuation">.</span>css
<span class="token constant">NETWORK</span><span class="token operator">:</span>
resourse<span class="token operator">/</span>logo<span class="token punctuation">.</span>png
<span class="token constant">FALLBACK</span><span class="token operator">:</span>
<span class="token operator">/</span>offline<span class="token punctuation">.</span>html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="浏览器是怎么对-html5-的离线储存资源进行管理和加载的呢" tabindex="-1"><a class="header-anchor" href="#浏览器是怎么对-html5-的离线储存资源进行管理和加载的呢" aria-hidden="true">#</a> 浏览器是怎么对 HTML5 的离线储存资源进行管理和加载的呢</h2><ul><li>在线的情况下，浏览器发现 html 头部有 manifest 属性，它会请求 manifest 文件，如果是第一次访问 app ，那么浏览器就会根据 manifest 文件的内容下载相应的资源并且进行离线存储。如果已经访问过 app 并且资源已经离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的 manifest 文件与旧的 manifest 文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，那么就会重新下载文件中的资源并进行离线存储。</li><li>离线的情况下，浏览器就直接使用离线存储的资源。</li></ul><h2 id="请描述一下-cookies-sessionstorage-和-localstorage-的区别" tabindex="-1"><a class="header-anchor" href="#请描述一下-cookies-sessionstorage-和-localstorage-的区别" aria-hidden="true">#</a> 请描述一下 cookies ， sessionStorage 和 localStorage 的区别</h2><ul><li>cookie 是网站为了标示用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）</li><li>cookie 数据始终在同源的 http 请求中携带（即使不需要），记会在浏览器和服务器间来回传递</li><li>sessionStorage 和 localStorage 不会自动把数据发给服务器，仅在本地保存</li><li>存储大小： <ul><li>cookie 数据大小不能超过 4k</li><li>sessionStorage 和 localStorage 虽然也有存储大小的限制，但比 cookie 大得多，可以达到 5M 或更大</li></ul></li><li>有期时间： <ul><li>localStorage 存储持久数据，浏览器关闭后数据不丢失除非主动删除数据</li><li>sessionStorage 数据在当前浏览器窗口关闭后自动删除</li><li>cookie 设置的 cookie 过期时间之前一直有效，即使窗口或浏览器关闭</li></ul></li></ul><h2 id="为什么利用多个域名来存储网站资源会更有效" tabindex="-1"><a class="header-anchor" href="#为什么利用多个域名来存储网站资源会更有效" aria-hidden="true">#</a> 为什么利用多个域名来存储网站资源会更有效？</h2><ul><li>CDN 缓存更方便</li><li>突破浏览器并发限制</li><li>节约 cookie 带宽</li><li>节约主域名的连接数，优化页面响应速度</li><li>防止不必要的安全问题</li></ul><h2 id="在-css-js-代码上线之后开发人员经常会优化性能-从用户刷新网页开始-一次-js-请求一般情况下有哪些地方会有缓存处理" tabindex="-1"><a class="header-anchor" href="#在-css-js-代码上线之后开发人员经常会优化性能-从用户刷新网页开始-一次-js-请求一般情况下有哪些地方会有缓存处理" aria-hidden="true">#</a> 在 css/js 代码上线之后开发人员经常会优化性能，从用户刷新网页开始，一次 js 请求一般情况下有哪些地方会有缓存处理？</h2><p>dns 缓存， cdn 缓存，浏览器缓存，服务器缓存</p><h2 id="web-开发中会话跟踪的方法有哪些" tabindex="-1"><a class="header-anchor" href="#web-开发中会话跟踪的方法有哪些" aria-hidden="true">#</a> web 开发中会话跟踪的方法有哪些</h2><p>cookie、session、url 重写、隐藏 input、ip 地址</p><h2 id="http-request-报文结构是怎样的" tabindex="-1"><a class="header-anchor" href="#http-request-报文结构是怎样的" aria-hidden="true">#</a> HTTP request 报文结构是怎样的</h2><ol><li>首行是 Request-Line 包括：请求方法，请求 URI，协议版本，CRLF</li><li>首行之后是若干行请求头，包括 general-header，request-header 或者 entity-header，每个一行以 CRLF 结束</li><li>请求头和消息实体之间有一个 CRLF 分隔</li><li>根据实际请求需要可能包含一个消息实体 一个请求报文例子如下：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">GET</span> <span class="token operator">/</span>Protocols<span class="token operator">/</span>rfc2616<span class="token operator">/</span>rfc2616<span class="token operator">-</span>sec5<span class="token punctuation">.</span>html <span class="token constant">HTTP</span><span class="token operator">/</span><span class="token number">1.1</span>
<span class="token literal-property property">Host</span><span class="token operator">:</span> www<span class="token punctuation">.</span>w3<span class="token punctuation">.</span>org
<span class="token literal-property property">Connection</span><span class="token operator">:</span> keep<span class="token operator">-</span>alive
Cache<span class="token operator">-</span>Control<span class="token operator">:</span> max<span class="token operator">-</span>age<span class="token operator">=</span><span class="token number">0</span>
<span class="token literal-property property">Accept</span><span class="token operator">:</span> text<span class="token operator">/</span>html<span class="token punctuation">,</span>application<span class="token operator">/</span>xhtml<span class="token operator">+</span>xml<span class="token punctuation">,</span>application<span class="token operator">/</span>xml<span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span>image<span class="token operator">/</span>webp<span class="token punctuation">,</span><span class="token operator">*</span><span class="token operator">/</span>
User<span class="token operator">-</span>Agent<span class="token operator">:</span> Mozilla<span class="token operator">/</span><span class="token number">5.0</span> <span class="token punctuation">(</span>Windows <span class="token constant">NT</span> <span class="token number">6.1</span><span class="token punctuation">;</span> <span class="token constant">WOW64</span><span class="token punctuation">)</span> AppleWebKit<span class="token operator">/</span><span class="token number">537.36</span> <span class="token punctuation">(</span><span class="token constant">KHTML</span><span class="token punctuation">,</span>
<span class="token literal-property property">Referer</span><span class="token operator">:</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">www.google.com.hk</span><span class="token regex-delimiter">/</span></span>
Accept<span class="token operator">-</span>Encoding<span class="token operator">:</span> gzip<span class="token punctuation">,</span>deflate<span class="token punctuation">,</span>sdch
Accept<span class="token operator">-</span>Language<span class="token operator">:</span> zh<span class="token operator">-</span><span class="token constant">CN</span><span class="token punctuation">,</span>zh<span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">,</span>en<span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.6</span>
<span class="token literal-property property">Cookie</span><span class="token operator">:</span> authorstyle<span class="token operator">=</span>yes
If<span class="token operator">-</span>None<span class="token operator">-</span>Match<span class="token operator">:</span> <span class="token string">&quot;2cc8-3e3073913b100&quot;</span>
If<span class="token operator">-</span>Modified<span class="token operator">-</span>Since<span class="token operator">:</span> Wed<span class="token punctuation">,</span> <span class="token number">01</span> Sep <span class="token number">2004</span> <span class="token number">13</span><span class="token operator">:</span><span class="token number">24</span><span class="token operator">:</span><span class="token number">52</span> <span class="token constant">GMT</span>
name<span class="token operator">=</span>qiu<span class="token operator">&amp;</span>age<span class="token operator">=</span><span class="token number">25</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="http-response-报文结构是怎样的" tabindex="-1"><a class="header-anchor" href="#http-response-报文结构是怎样的" aria-hidden="true">#</a> HTTP response 报文结构是怎样的</h2><ol><li>首行是状态行包括：HTTP 版本，状态码，状态描述，后面跟一个 CRLF</li><li>首行之后是若干行响应头，包括：通用头部，响应头部，实体头部</li><li>响应头部和响应实体之间用一个 CRLF 空行分隔</li><li>最后是一个可能的消息实体 响应报文例子如下：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">HTTP</span><span class="token operator">/</span><span class="token number">1.1</span> <span class="token number">200</span> <span class="token constant">OK</span>
<span class="token literal-property property">Date</span><span class="token operator">:</span> Tue<span class="token punctuation">,</span> <span class="token number">08</span> Jul <span class="token number">2014</span> <span class="token number">05</span><span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">43</span> <span class="token constant">GMT</span>
<span class="token literal-property property">Server</span><span class="token operator">:</span> Apache<span class="token operator">/</span><span class="token number">2</span>
Last<span class="token operator">-</span>Modified<span class="token operator">:</span> Wed<span class="token punctuation">,</span> <span class="token number">01</span> Sep <span class="token number">2004</span> <span class="token number">13</span><span class="token operator">:</span><span class="token number">24</span><span class="token operator">:</span><span class="token number">52</span> <span class="token constant">GMT</span>
<span class="token literal-property property">ETag</span><span class="token operator">:</span> <span class="token string">&quot;40d7-3e3073913b100&quot;</span>
Accept<span class="token operator">-</span>Ranges<span class="token operator">:</span> bytes
Content<span class="token operator">-</span>Length<span class="token operator">:</span> <span class="token number">16599</span>
Cache<span class="token operator">-</span>Control<span class="token operator">:</span> max<span class="token operator">-</span>age<span class="token operator">=</span><span class="token number">21600</span>
<span class="token literal-property property">Expires</span><span class="token operator">:</span> Tue<span class="token punctuation">,</span> <span class="token number">08</span> Jul <span class="token number">2014</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">43</span> <span class="token constant">GMT</span>
<span class="token constant">P3P</span><span class="token operator">:</span> policyref<span class="token operator">=</span><span class="token string">&quot;http://www.w3.org/2001/05/P3P/p3p.xml&quot;</span>
Content<span class="token operator">-</span>Type<span class="token operator">:</span> text<span class="token operator">/</span>html<span class="token punctuation">;</span> charset<span class="token operator">=</span>iso<span class="token operator">-</span><span class="token number">8859</span><span class="token operator">-</span><span class="token number">1</span>

<span class="token punctuation">{</span><span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;qiu&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="web-开发中会话跟踪的方法有哪些-1" tabindex="-1"><a class="header-anchor" href="#web-开发中会话跟踪的方法有哪些-1" aria-hidden="true">#</a> web 开发中会话跟踪的方法有哪些</h2><ul><li>cookie</li><li>session</li><li>url 重写</li><li>隐藏 input</li><li>ip 地址</li></ul><h2 id="websocket" tabindex="-1"><a class="header-anchor" href="#websocket" aria-hidden="true">#</a> WebSocket</h2><blockquote><p>由于 http 存在一个明显的弊端（消息只能有客户端推送到服务器端，而服务器端不能主动推送到客户端），导致如果服务器如果有连续的变化，这时只能使用轮询，而轮询效率过低，并不适合。于是 WebSocket 被发明出来相比与 http 具有以下有点</p></blockquote><ul><li>支持双向通信，实时性更强；</li><li>可以发送文本，也可以二进制文件；</li><li>协议标识符是 ws ，加密后是 wss ；</li><li>较少的控制开销。连接创建后， ws 客户端、服务端进行数据交换时，协议控制的数据包头部较小。在不包含头部的情况下，服务端到客户端的包头只有 2~10 字节（取决于数据包长度），客户端到服务端的的话，需要加上额外的 4 字节的掩码。而 HTTP 协议每次通信都需要携带完整的头部；</li><li>支持扩展。ws 协议定义了扩展，用户可以扩展协议，或者实现自定义的子协议。（比如支持自定义压缩算法等）</li><li>无跨域问题。</li></ul>`,41),k={href:"http://socket.io",target:"_blank",rel:"noopener noreferrer"},h=a(`<h2 id="为什么-canvas-的图片为什么过有跨域问题" tabindex="-1"><a class="header-anchor" href="#为什么-canvas-的图片为什么过有跨域问题" aria-hidden="true">#</a> 为什么 canvas 的图片为什么过有跨域问题</h2><h2 id="浏览器缓存" tabindex="-1"><a class="header-anchor" href="#浏览器缓存" aria-hidden="true">#</a> 浏览器缓存</h2><blockquote><p>浏览器缓存分为强缓存和协商缓存。当客户端请求某个资源时，获取缓存的流程如下</p></blockquote><ul><li>先根据这个资源的一些 http header 判断它是否命中强缓存，如果命中，则直接从本地获取缓存资源，不会发请求到服务器；</li><li>当强缓存没有命中时，客户端会发送请求到服务器，服务器通过另一些 request header 验证这个资源是否命中协商缓存，称为 http 再验证，如果命中，服务器将请求返回，但不返回资源，而是告诉客户端直从缓存中获取，客户端收到返回后就会从缓存中获取资源；</li><li>强缓存和协商缓存共同之处在于，如果命中缓存，服务器都不会返回资源； 区别是，强缓存不对发送请求到服务器，但协商缓存会。</li><li>当协商缓存也没命中时，服务器就会将资源发送回客户端。</li><li>当 ctrl+f5 强制刷新网页时，直接从服务器加载，跳过强缓存和协商缓存；</li><li>当 f5 刷新网页时，跳过强缓存，但是会检查协商缓存；</li></ul><p><strong>强缓存</strong></p><ul><li>Expires （该字段是 http1.0 时的规范，值为一个绝对时间的 GMT 格式的时间字符串，代表缓存资源的过期时间）</li><li>Cache-Control:max-age （该字段是 http1.1 的规范，强缓存利用其 max-age 值来判断缓存资源的最大生命周期，它的值单位为秒）</li></ul><p><strong>协商缓存</strong></p><ul><li>Last-Modified （值为资源最后更新时间，随服务器 response 返回）</li><li>If-Modified-Since （通过比较两个时间来判断资源在两次请求期间是否有过修改，如果没有修改，则命中协商缓存）</li><li>ETag （表示资源内容的唯一标识，随服务器 response 返回）</li><li>If-None-Match （服务器通过比较请求头部的 If-None-Match 与当前资源的 ETag 是否一致来判断资源是否在两次请求之间有过修改，如果没有修改，则命中协商缓存）</li></ul><h2 id="说一下浏览器的缓存机制" tabindex="-1"><a class="header-anchor" href="#说一下浏览器的缓存机制" aria-hidden="true">#</a> 说一下浏览器的缓存机制</h2><blockquote><p>浏览器缓存机制有两种，一种为强缓存，一种为协商缓存</p></blockquote><ul><li>对于强缓存，浏览器在第一次请求的时候，会直接下载资源，然后缓存在本地，第二次请求的时候，直接使用缓存。</li><li>对于协商缓存，第一次请求缓存且保存缓存标识与时间，重复请求向服务器发送缓存标识和最后缓存时间，服务端进行校验，如果失效则使用缓存</li></ul><p><strong>协商缓存相关设置</strong></p><ul><li>Exprires ：服务端的响应头，第一次请求的时候，告诉客户端，该资源什么时候会过期。 Exprires 的缺陷是必须保证服务端时间和客户端时间严格同步。</li><li>Cache-control：max-age ：表示该资源多少时间后过期，解决了客户端和服务端时间必须同步的问题，</li><li>If-None-Match/ETag ：缓存标识，对比缓存时使用它来标识一个缓存，第一次请求的时候，服务端会返回该标识给客户端，客户端在第二次请求的时候会带上该标识与服务端进行对比并返回 If-None-Match 标识是否表示匹配。</li><li>Last-modified/If-Modified-Since ：第一次请求的时候服务端返回 Last-modified 表明请求的资源上次的修改时间，第二次请求的时候客户端带上请求头 If-Modified-Since ，表示资源上次的修改时间，服务端拿到这两个字段进行对比</li></ul><h2 id="浏览器缓存机制" tabindex="-1"><a class="header-anchor" href="#浏览器缓存机制" aria-hidden="true">#</a> 浏览器缓存机制</h2><blockquote><p>注意：该知识点属于性能优化领域，并且整一章节都是一个面试题</p></blockquote><ul><li>缓存可以说是性能优化中简单高效的一种优化方式了，它可以显著减少网络传输所带来的损耗。</li><li>对于一个数据请求来说，可以分为发起网络请求、后端处理、浏览器响应三个步骤。浏览器缓存可以帮助我们在第一和第三步骤中优化性能。比如说直接使用缓存而不发起请求，或者发起了请求但后端存储的数据和前端一致，那么就没有必要再将数据回传回来，这样就减少了响应数据。</li></ul><blockquote><p>接下来的内容中我们将通过以下几个部分来探讨浏览器缓存机制：</p></blockquote><ul><li>缓存位置</li><li>缓存策略</li><li>实际场景应用缓存策略</li></ul><h3 id="缓存位置" tabindex="-1"><a class="header-anchor" href="#缓存位置" aria-hidden="true">#</a> 缓存位置</h3><blockquote><p>从缓存位置上来说分为四种，并且各自有优先级，当依次查找缓存且都没有命中的时候，才会去请求网络</p></blockquote><p>1.Service Worker 2.Memory Cache 3.Disk Cache 4.Push Cache 5.网络请求</p><ol><li><p>Service Worker</p><ul><li>service Worker 的缓存与浏览器其他内建的缓存机制不同，它可以让我们自由控制缓存哪些文件、如何匹配缓存、如何读取缓存，并且缓存是持续性的。</li><li>当 Service Worker 没有命中缓存的时候，我们需要去调用 fetch 函数获取数据。也就是说，如果我们没有在 Service Worker 命中缓存的话，会根据缓存查找优先级去查找数据。但是不管我们是从 Memory Cache 中还是从网络请求中获取的数据，浏览器都会显示我们是从 Service Worker 中获取的内容。</li></ul></li><li><p>Memory Cache</p><ul><li>Memory Cache 也就是内存中的缓存，读取内存中的数据肯定比磁盘快。但是内存缓存虽然读取高效，可是缓存持续性很短，会随着进程的释放而释放。 一旦我们关闭 Tab 页面，内存中的缓存也就被释放了。</li><li>当我们访问过页面以后，再次刷新页面，可以发现很多数据都来自于内存缓存</li></ul><blockquote><p>那么既然内存缓存这么高效，我们是不是能让数据都存放在内存中呢？</p></blockquote><ul><li>先说结论，这是不可能的。首先计算机中的内存一定比硬盘容量小得多，操作系统需要精打细算内存的使用，所以能让我们使用的内存必然不多。内存中其实可以存储大部分的文件，比如说 JS 、 HTML 、 CSS 、图片等等</li><li>当然，我通过一些实践和猜测也得出了一些结论：</li><li>对于大文件来说，大概率是不存储在内存中的，反之优先当前系统内存使用率高的话，文件优先存储进硬盘</li></ul></li><li><p>Disk Cache</p></li></ol><ul><li>Disk Cache 也就是存储在硬盘中的缓存，读取速度慢点，但是什么都能存储到磁盘中，比之 Memory Cache 胜在容量和存储时效性上。</li><li>在所有浏览器缓存中， Disk Cache 覆盖面基本是最大的。它会根据 ·HTTP Herder· 中的字段判断哪些资源需要缓存，哪些资源可以不请求直接使用，哪些资源已经过期需要重新请求。并且即使在跨站点的情况下，相同地址的资源一旦被硬盘缓存下来，就不会再次去请求数据</li></ul><ol start="4"><li>Push Cache</li></ol><ul><li>Push Cache 是 HTTP/2 中的内容，当以上三种缓存都没有命中时，它才会被使用。并且缓存时间也很短暂，只在会话（ Session ）中存在，一旦会话结束就被释放。</li><li>Push Cache 在国内能够查到的资料很少，也是因为 HTTP/2 在国内不够普及，但是 HTTP/2 将会是日后的一个趋势 <strong>结论</strong></li><li>所有的资源都能被推送，但是 Edge 和 Safari 浏览器兼容性不怎么好</li><li>可以推送 no-cache 和 no-store 的资源</li><li>一旦连接被关闭， Push Cache 就被释放</li><li>多个页面可以使用相同的 HTTP/2 连接，也就是说能使用同样的缓存</li><li>Push Cache 中的缓存只能被使用一次</li><li>浏览器可以拒绝接受已经存在的资源推送</li><li>你可以给其他域名推送资源</li></ul><ol start="5"><li>网络请求</li></ol><ul><li>如果所有缓存都没有命中的话，那么只能发起请求来获取资源了。</li><li>那么为了性能上的考虑，大部分的接口都应该选择好缓存策略，接下来我们就来学习缓存策略这部分的内容</li></ul><h3 id="缓存策略" tabindex="-1"><a class="header-anchor" href="#缓存策略" aria-hidden="true">#</a> 缓存策略</h3><blockquote><p>通常浏览器缓存策略分为两种：强缓存和协商缓存，并且缓存策略都是通过设置 HTTP Header 来实现的</p></blockquote><h4 id="强缓存" tabindex="-1"><a class="header-anchor" href="#强缓存" aria-hidden="true">#</a> 强缓存</h4><blockquote><p>强缓存可以通过设置两种 HTTP Header 实现： Expires 和 Cache-Control。强缓存表示在缓存期间不需要请求， state code 为 200</p></blockquote><p><strong>Expires</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">Expires</span><span class="token operator">:</span> Wed<span class="token punctuation">,</span> <span class="token number">22</span> Oct <span class="token number">2018</span> <span class="token number">08</span><span class="token operator">:</span><span class="token number">41</span><span class="token operator">:</span><span class="token number">00</span> <span class="token constant">GMT</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>Expires 是 HTTP/1 的产物，表示资源会在 Wed, 22 Oct 2018 08:41:00GMT 后过期，需要再次请求。并且 Expires 受限于本地时间，如果修改了本地时间，可能会造成缓存失效。</p></blockquote><p><strong>Cache-control</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Cache<span class="token operator">-</span>control<span class="token operator">:</span> max<span class="token operator">-</span>age<span class="token operator">=</span><span class="token number">30</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>Cache-Control 出现于 HTTP/1.1 ，优先级高于 Expires 。该属性值表示资源会在 30 秒后过期，需要再次请求。</li><li>Cache-Control 可以在请求头或者响应头中设置，并且可以组合使用多种指令</li></ul><blockquote><p>从图中我们可以看到，我们可以将多个指令配合起来一起使用，达到多个目的。比如说我们希望资源能被缓存下来，并且是客户端和代理服务器都能缓存，还能设置缓存失效时间等</p></blockquote><p><strong>一些常见指令的作用</strong></p><h4 id="协商缓存" tabindex="-1"><a class="header-anchor" href="#协商缓存" aria-hidden="true">#</a> 协商缓存</h4><ul><li>如果缓存过期了，就需要发起请求验证资源是否有更新。协商缓存可以通过设置两种 HTTP Header 实现： Last-Modified 和 ETag</li><li>当浏览器发起请求验证资源时，如果资源没有做改变，那么服务端就会返回 304 状态码，并且更新浏览器缓存有效期。</li></ul><p><strong>Last-Modified 和 If-Modified-Since</strong></p><blockquote><p>Last-Modified 表示本地文件最后修改日期， If-Modified-Since 会将 Last-Modified 的值发送给服务器，询问服务器在该日期后资源是否有更新，有更新的话就会将新的资源发送回来，否则返回 304 状态码。</p></blockquote><p>但是 Last-Modified 存在一些弊端：</p><ul><li>如果本地打开缓存文件，即使没有对文件进行修改，但还是会造成 Last-Modified 被修改，服务端不能命中缓存导致发送相同的资源</li><li>因为 Last-Modified 只能以秒计时，如果在不可感知的时间内修改完成文件，那么服务端会认为资源还是命中了，不会返回正确的资源 因为以上这些弊端，所以在 HTTP / 1.1 出现了 ETag</li></ul><p><strong>ETag 和 If-None-Match</strong></p><ul><li>ETag 类似于文件指纹， If-None-Match 会将当前 ETag 发送给服务器，询问该资源 ETag 是否变动，有变动的话就将新的资源发送回来。并且 ETag 优先级比 Last-Modified 高。</li></ul><blockquote><p>以上就是缓存策略的所有内容了，看到这里，不知道你是否存在这样一个疑问。如果什么缓存策略都没设置，那么浏览器会怎么处理？</p></blockquote><p>对于这种情况，浏览器会采用一个启发式的算法，通常会取响应头中的 Date 减去 Last-Modified 值的 10% 作为缓存时间。</p><h3 id="实际场景应用缓存策略" tabindex="-1"><a class="header-anchor" href="#实际场景应用缓存策略" aria-hidden="true">#</a> 实际场景应用缓存策略</h3><p><strong>频繁变动的资源</strong></p><blockquote><p>对于频繁变动的资源，首先需要使用 Cache-Control: no-cache 使浏览器每次都请求服务器，然后配合 ETag 或者 Last-Modified 来验证资源是否有效。这样的做法虽然不能节省请求数量，但是能显著减少响应数据大小。</p></blockquote><p><strong>代码文件</strong></p><blockquote><p>这里特指除了 HTML 外的代码文件，因为 HTML 文件一般不缓存或者缓存时间很短。</p></blockquote><p>一般来说，现在都会使用工具来打包代码，那么我们就可以对文件名进行哈希处理，只有当代码修改后才会生成新的文件名。基于此，我们就可以给代码文件设置缓存有效期一年 Cache-Control: max-age=31536000 ，这样只有当 HTML 文件中引入的文件名发生了改变才会去下载最新的代码文件，否则就一直使用缓存</p>`,55),b={href:"http://blog.poetries.top/2019/01/02/browser-cache",target:"_blank",rel:"noopener noreferrer"},v=a(`<h2 id="ajax、axios、fetch-区别" tabindex="-1"><a class="header-anchor" href="#ajax、axios、fetch-区别" aria-hidden="true">#</a> ajax、axios、fetch 区别</h2><p>jQuery ajax</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">url</span><span class="token operator">:</span> url<span class="token punctuation">,</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> data<span class="token punctuation">,</span>
  <span class="token literal-property property">dataType</span><span class="token operator">:</span> dataType<span class="token punctuation">,</span>
  <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">error</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>优缺点：</p><ul><li>本身是针对 MVC 的编程,不符合现在前端 MVVM 的浪潮</li><li>基于原生的 XHR 开发， XHR 本身的架构不清晰，已经有了 fetch 的替代方案</li><li>JQuery 整个项目太大，单纯使用 ajax 却要引入整个 JQuery 非常的不合理（采取个性化打包的方案又不能享受 CDN 服务）</li></ul><p>axios</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;/user/12345&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">&#39;Fred&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">&#39;Flintstone&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>优缺点：</p><ul><li>从浏览器中创建 XMLHttpRequest</li><li>从 node.js 发出 http 请求</li><li>支持 Promise API</li><li>拦截请求和响应</li><li>转换请求和响应数据</li><li>取消请求</li><li>自动转换 JSON 数据</li><li>客户端支持防止 CSRF/XSRF</li></ul><p>fetch</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> data <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Oops, error&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>优缺点：</p><ul><li>fetcht 只对网络请求报错，对 400 ， 500 都当做成功的请求，需要封装去处理</li><li>fetch 默认不会带 cookie ，需要添加配置项</li><li>fetch 不支持 abort ，不支持超时控制，使用 setTimeout 及 Promise.reject 的实现的</li><li>超时控制并不能阻止请求过程继续在后台运行，造成了量的浪费</li><li>fetch 没有办法原生监测请求的进度，而 XHR 可以</li></ul><h2 id="service-worker" tabindex="-1"><a class="header-anchor" href="#service-worker" aria-hidden="true">#</a> Service Worker</h2><blockquote><p>Service workers 本质上充当 Web 应用程序与浏览器之间的代理服务器，也可以在网络可用时作为浏览器和网络间的代理。它们旨在（除其他之外）使得能够创建有效的离线体验，拦截网络请求并基于网络是否可用以及更新的资源是否驻留在服务器上来采取适当的动作。他们还允许访问推送通知和后台同步 API</p></blockquote><p>目前该技术通常用来做缓存文件，提高首屏速度</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// index.js</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>serviceWorker<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  navigator<span class="token punctuation">.</span>serviceWorker
  <span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">&quot;sw.js&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">registration</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;service worker 注册成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;servcie worker 注册失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// sw.js</span>
<span class="token comment">// 监听 &#39;install&#39; 事件，回调中缓存所需文件</span>
self<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;install&quot;</span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  e<span class="token punctuation">.</span><span class="token function">waitUntil</span><span class="token punctuation">(</span>
    caches<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;my-cache&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">cache</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> cache<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;./index.html&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;./index.js&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 拦截所有请求事件</span>
<span class="token comment">// 如果缓存中已经有请求的数据就直接用缓存，否则去请求数据</span>
self<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;fetch&quot;</span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  e<span class="token punctuation">.</span><span class="token function">respondWith</span><span class="token punctuation">(</span>
    caches<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> response<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;fetch source&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>打开页面，可以在开发者工具中的 Application 看到 Service Worker 已经启动了 在 Cache 中也可以发现我们所需的文件已被缓存 当我们重新刷新页面可以发现我们缓存的数据是从 Service Worker 中读取的</p></blockquote><h2 id="渲染机制" tabindex="-1"><a class="header-anchor" href="#渲染机制" aria-hidden="true">#</a> 渲染机制</h2><h3 id="渲染过程" tabindex="-1"><a class="header-anchor" href="#渲染过程" aria-hidden="true">#</a> 渲染过程</h3><ul><li>处理 HTML 并构建 DOM 树。</li><li>处理 CSS 构建 CSSOM 树。</li><li>将 DOM 与 CSSOM 合并成一个渲染树。</li><li>根据渲染树来布局，计算每个节点的位置。</li><li>调用 GPU 绘制，合成图层，显示在屏幕上</li><li>在构建 CSSOM 树时，会阻塞渲染，直至 CSSOM 树构建完成。并且构建 CSSOM 树是一个十分消耗性能的过程，所以应该尽量保证层级扁平，减少过度层叠，越是具体的 CSS 选择器，执行速度越慢</li><li>当 HTML 解析到 script 标签时，会暂停构建 DOM，完成后才会从暂停的地方重新开始。也就是说，如果你想首屏渲染的越快，就越不应该在首屏就加载 JS 文件。并且 CSS 也会影响 JS 的执行，只有当解析完样式表才会执行 JS，所以也可以认为这种情况下，CSS 也会暂停构建 DOM</li></ul><ol><li><p>浏览器接收到 HTML 文件并转换为 DOM 树</p><blockquote><p>当我们打开一个网页时，浏览器都会去请求对应的 HTML 文件。虽然平时我们写代码时都会分为 JS 、 CSS 、 HTML 文件，也就是字符串，但是计算机硬件是不理解这些字符串的，所以在网络中传输的内容其实都是 0 和 1 这些字节数据。当浏览器接收到这些字节数据以后，它会将这些字节数据转换为字符串，也就是我们写的代码。 当数据转换为字符串以后，浏览器会先将这些字符串通过词法分析转换为标记（ token ），这一过程在词法分析中叫做标记化（ tokenization ） 那么什么是标记呢？这其实属于编译原理这一块的内容了。简单来说，标记还是字符串，是构成代码的最小单位。这一过程会将代码分拆成一块块，并给这些内容打上标记，便于理解这些最小单位的代码是什么意思 当结束标记化后，这些标记会紧接着转换为 Node ，最后这些 Node 会根据不同 Node 之前的联系构建为一颗 DOM 树 以上就是浏览器从网络中接收到 HTML 文件然后一系列的转换过程 当然，在解析 HTML 文件的时候，浏览器还会遇到 CSS 和 JS 文件，这时候浏览器也会去下载并解析这些文件，接下来就让我们先来学习浏览器如何解析 CSS 文件</p></blockquote></li><li><p>将 CSS 文件转换为 CSSOM 树</p><blockquote><p>其实转换 CSS 到 CSSOM 树的过程和上一小节的过程是极其类似的</p></blockquote><ul><li>在这一过程中，浏览器会确定下每一个节点的样式到底是什么，并且这一过程其实是很消耗资源的。因为样式你可以自行设置给某个节点，也可以通过继承获得。在这一过程中，浏览器得递归 CSSOM 树，然后确定具体的元素到底是什么样式。</li></ul><p>如果你有点不理解为什么会消耗资源的话，我这里举个例子</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>a<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>
  span <span class="token punctuation">{</span>
    <span class="token literal-property property">color</span><span class="token operator">:</span> red<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  div <span class="token operator">&gt;</span> a <span class="token operator">&gt;</span> span <span class="token punctuation">{</span>
    <span class="token literal-property property">color</span><span class="token operator">:</span> red<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>对于第一种设置样式的方式来说，浏览器只需要找到页面中所有的 span 标签然后设置颜色，但是对于第二种设置样式的方式来说，浏览器首先需要找到所有的 span 标签，然后找到 span 标签上的 a 标签，最后再去找到 div 标签，然后给符合这种条件的 span 标签设置颜色，这样的递归过程就很复杂。所以我们应该尽可能的避免写过于具体的 CSS 选择器，然后对于 HTML 来说也尽量少的添加无意义标签，保证层级扁平</p></blockquote></li><li><p>生成渲染树</p><blockquote><p>当我们生成 DOM 树和 CSSOM 树以后，就需要将这两棵树组合为渲染树</p></blockquote><ul><li>在这一过程中，不是简单的将两者合并就行了。渲染树只会包括需要显示的节点和这些节点的样式信息，如果某个节点是 display: none 的，那么就不会在渲染树中显示。</li><li>当浏览器生成渲染树以后，就会根据渲染树来进行布局（也可以叫做回流），然后调用 GPU 绘制，合成图层，显示在屏幕上。对于这一部分的内容因为过于底层，还涉及到了硬件相关的知识，这里就不再继续展开内容了。</li></ul></li></ol><h3 id="图层" tabindex="-1"><a class="header-anchor" href="#图层" aria-hidden="true">#</a> 图层</h3><blockquote><p>一般来说，可以把普通文档流看成一个图层。特定的属性可以生成一个新的图层。不同的图层渲染互不影响，所以对于某些频繁需要渲染的建议单独生成一个新图层，提高性能。但也不能生成过多的图层，会引起反作用</p></blockquote><ul><li>通过以下几个常用属性可以生成新图层</li><li>3D 变换： translate3d 、 translateZ</li><li>will-change</li><li>video 、 iframe 标签</li><li>通过动画实现的 opacity 动画转换</li><li>position: fixed</li></ul><h3 id="为什么操作-dom-慢" tabindex="-1"><a class="header-anchor" href="#为什么操作-dom-慢" aria-hidden="true">#</a> 为什么操作 DOM 慢</h3><blockquote><p>想必大家都听过操作 DOM 性能很差，但是这其中的原因是什么呢？</p></blockquote><ul><li>因为 DOM 是属于渲染引擎中的东西，而 JS 又是 JS 引擎中的东西。当我们通过 JS 操作 DOM 的时候，其实这个操作涉及到了两个线程之间的通信，那么势必会带来一些性能上的损耗。操作 DOM 次数一多，也就等同于一直在进行线程之间的通信，并且操作 DOM 可能还会带来重绘回流的情况，所以也就导致了性能上的问题。</li></ul><blockquote><p>经典面试题：插入几万个 DOM，如何实现页面不卡顿？</p></blockquote><ul><li>对于这道题目来说，首先我们肯定不能一次性把几万个 DOM 全部插入，这样肯定会造成卡顿，所以解决问题的重点应该是如何分批次部分渲染 DOM 。大部分人应该可以想到通过 requestAnimationFrame 的方式去循环的插入 DOM ，其实还有种方式去解决这个问题：虚拟滚动（ virtualized scroller ）。</li><li>这种技术的原理就是只渲染可视区域内的内容，非可见区域的那就完全不渲染了，当用户在滚动的时候就实时去替换渲染的内容</li></ul><blockquote><p>从上图中我们可以发现，即使列表很长，但是渲染的 DOM 元素永远只有那么几个，当我们滚动页面的时候就会实时去更新 DOM ，这个技术就能顺利解决这道经典面试题</p></blockquote><h3 id="什么情况阻塞渲染" tabindex="-1"><a class="header-anchor" href="#什么情况阻塞渲染" aria-hidden="true">#</a> 什么情况阻塞渲染</h3><ul><li>首先渲染的前提是生成渲染树，所以 HTML 和 CSS 肯定会阻塞渲染。如果你想渲染的越快，你越应该降低一开始需要渲染的文件大小，并且扁平层级，优化选择器。</li><li>然后当浏览器在解析到 script 标签时，会暂停构建 DOM ，完成后才会从暂停的地方重新开始。也就是说，如果你想首屏渲染的越快，就越不应该在首屏就加载 JS 文件，这也是都建议将 script 标签放在 body 标签底部的原因。</li><li>当然在当下，并不是说 script 标签必须放在底部，因为你可以给 script 标签添加 defer 或者 async 属性。</li><li>当 script 标签加上 defer 属性以后，表示该 JS 文件会并行下载，但是会放到 HTML 解析完成后顺序执行，所以对于这种情况你可以把 script 标签放在任意位置。</li><li>对于没有任何依赖的 JS 文件可以加上 async 属性，表示 JS 文件下载和解析不会阻塞渲染。</li></ul><h3 id="重绘-repaint-和回流-reflow" tabindex="-1"><a class="header-anchor" href="#重绘-repaint-和回流-reflow" aria-hidden="true">#</a> 重绘（Repaint）和回流（Reflow）</h3><ul><li><p>重绘是当节点需要更改外观而不会影响布局的，比如改变 color 就叫称为重绘</p></li><li><p>回流是布局或者几何属性需要改变就称为回流</p></li><li><p>回流必定会发生重绘，重绘不一定会引发回流。回流所需的成本比重绘高的多，改变深层次的节点很可能导致父节点的一系列回流</p></li><li><p>所以以下几个动作可能会导致性能问题：</p><ul><li>改变 window 大小</li><li>改变字体</li><li>添加或删除样式</li><li>文字改变</li><li>定位或者浮动</li><li>盒模型</li></ul></li></ul><p><strong>很多人不知道的是，重绘和回流其实和 Event loop 有关</strong></p><ul><li>当 Event loop 执行完 Microtasks 后，会判断 document 是否需要更新。因为浏览器是 60Hz 的刷新率，每 16ms 才会更新一次。</li><li>然后判断是否有 resize 或者 scroll ，有的话会去触发事件，所以 resize 和 scroll 事件也是至少 16ms 才会触发一次，并且自带节流功能。</li><li>判断是否触发了 media query</li><li>更新动画并且发送事件</li><li>判断是否有全屏操作事件</li><li>执行 requestAnimationFrame 回调</li><li>执行 IntersectionObserver 回调，该方法用于判断元素是否可见，可以用于懒加载上，但是兼容性不好</li><li>更新界面</li><li>以上就是一帧中可能会做的事情。如果在一帧中有空闲时间，就会去执行 requestIdleCallback 回调</li></ul><h3 id="减少重绘和回流" tabindex="-1"><a class="header-anchor" href="#减少重绘和回流" aria-hidden="true">#</a> 减少重绘和回流</h3><ul><li><p>使用 translate 替代 top</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;test&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>
<span class="token punctuation">.</span>test <span class="token punctuation">{</span>
  <span class="token literal-property property">position</span><span class="token operator">:</span> absolute<span class="token punctuation">;</span>
  <span class="token literal-property property">top</span><span class="token operator">:</span> 10px<span class="token punctuation">;</span>
  <span class="token literal-property property">width</span><span class="token operator">:</span> 100px<span class="token punctuation">;</span>
  <span class="token literal-property property">height</span><span class="token operator">:</span> 100px<span class="token punctuation">;</span>
  <span class="token literal-property property">background</span><span class="token operator">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 引起回流</span>
    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token string">&#39;100px&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用 visibility 替换 display: none ，因为前者只会引起重绘，后者会引发回流（改变了布局）</p></li><li><p>不要把节点的属性值放在一个循环里当成循环里的变量</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 获取 offsetTop 会导致回流，因为需要去获取正确的值</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>offsetTop<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>不要使用 table 布局，可能很小的一个小改动会造成整个 table 的重新布局</p></li><li><p>动画实现的速度的选择，动画速度越快，回流次数越多，也可以选择使用 requestAnimationFrame</p></li><li><p>CSS 选择符从右往左匹配查找，避免 DOM 深度过深</p></li><li><p>将频繁运行的动画变为图层，图层能够阻止该节点回流影响别的元素。比如对于 video 标签，浏览器会自动将该节点变为图层</p><blockquote><p>设置节点为图层的方式有很多，我们可以通过以下几个常用属性可以生成新图层</p></blockquote><ul><li>will-change</li><li>video 、 iframe 标签</li></ul></li></ul><h2 id="udp" tabindex="-1"><a class="header-anchor" href="#udp" aria-hidden="true">#</a> UDP</h2><ol><li><p>面向报文</p><blockquote><p>UDP 是一个面向报文（报文可以理解为一段段的数据）的协议。意思就是 UDP 只是报文的搬运工，不会对报文进行任何拆分和拼接操作</p></blockquote><p>具体来说</p><ul><li>在发送端，应用层将数据传递给传输层的 UDP 协议， UDP 只会给数据增加一个 UDP 头标识下是 UDP 协议，然后就传递给网络层了</li><li>在接收端，网络层将数据传递给传输层， UDP 只去除 IP 报文头就传递给应用层，不会任何拼接操作</li></ul></li><li><p>不可靠性</p><ul><li>UDP 是无连接的，也就是说通信不需要建立和断开连接。</li><li>UDP 也是不可靠的。协议收到什么数据就传递什么数据，并且也不会备份数据，对方能不能收到是不关心的</li><li>UDP 没有拥塞控制，一直会以恒定的速度发送数据。即使网络条件不好，也不会对发送速率进行调整。这样实现的弊端就是在网络条件不好的情况下可能会导致丢包，但是优点也很明显，在某些实时性要求高的场景（比如电话会议）就需要使用 UDP 而不是 TCP</li></ul></li><li><p>高效</p><ul><li>因为 UDP 没有 TCP 那么复杂，需要保证数据不丢失且有序到达。所以 UDP 的头部开销小，只有八字节，相比 TCP 的至少二十字节要少得多，在传输数据报文时是很高效的</li></ul><p>头部包含了以下几个数据</p><ul><li>两个十六位的端口号，分别为源端口（可选字段）和目标端口 整个数据报文的长度</li><li>整个数据报文的检验和（ IPv4 可选 字段），该字段用于发现头部信息和数据中的错误</li></ul></li><li><p>传输方式</p><blockquote><p>UDP 不止支持一对一的传输方式，同样支持一对多，多对多，多对一的方式，也就是说 UDP 提供了单播，多播，广播的功能</p></blockquote></li></ol><h2 id="tcp" tabindex="-1"><a class="header-anchor" href="#tcp" aria-hidden="true">#</a> TCP</h2><ol><li>头部</li></ol><blockquote><p>TCP 头部比 UDP 头部复杂的多 对于 TCP 头部来说，以下几个字段是很重要的</p></blockquote><ul><li>Sequence number ，这个序号保证了 TCP 传输的报文都是有序的，对端可以通过序号顺序的拼接报文</li><li>Acknowledgement Number ，这个序号表示数据接收端期望接收的下一个字节的编号是多少，同时也表示上一个序号的数据已经收到</li><li>Window Size ，窗口大小，表示还能接收多少字节的数据，用于流量控制</li></ul><p>标识符</p><ul><li>URG=1 ：该字段为一表示本数据报的数据部分包含紧急信息，是一个高优先级数据报文，此时紧急指针有效。紧急数据一定位于当前数据包数据部分的最前面，紧急指针标明了紧急数据的尾部。</li><li>ACK=1 ：该字段为一表示确认号字段有效。此外， TCP 还规定在连接建立后传送的所有报文段都必须把 ACK 置为一 PSH=1 ：该字段为一表示接收端应该立即将数据 push 给应用层，而不是等到缓冲区满后再提交。</li><li>RST=1 ：该字段为一表示当前 TCP 连接出现严重问题，可能需要重新建立 TCP 连接，也可以用于拒绝非法的报文段和拒绝连接请求。</li><li>SYN=1 ：当 SYN=1 ， ACK=0 时，表示当前报文段是一个连接请求报文。当 SYN=1 ，ACK=1 时，表示当前报文段是一个同意建立连接的应答报文。</li><li>FIN=1 ：该字段为一表示此报文段是一个释放连接的请求报文</li></ul><ol start="2"><li>状态机</li></ol><blockquote><p>HTTP 是无连接的，所以作为下层的 TCP 协议也是无连接的，虽然看似 TCP 将两端连接了起来，但是其实只是两端共同维护了一个状态</p></blockquote><ul><li>TCP 的状态机是很复杂的，并且与建立断开连接时的握手息息相关，接下来就来详细描述下两种握手。</li><li>在这之前需要了解一个重要的性能指标 RTT。该指标表示发送端发送数据到接收到对端数据所需的往返时间</li></ul><p>建立连接三次握手</p><ul><li>在 TCP 协议中，主动发起请求的一端为客户端，被动连接的一端称为服务端。不管是客户端还是服务端， TCP 连接建立完后都能发送和接收数据，所以 TCP 也是一个全双工的协议。</li><li>起初，两端都为 CLOSED 状态。在通信开始前，双方都会创建 TCB 。 服务器创建完 TCB 后遍进入 LISTEN 状态，此时开始等待客户端发送数据</li></ul><p>第一次握手</p><blockquote><p>客户端向服务端发送连接请求报文段。该报文段中包含自身的数据通讯初始序号。请求发送后，客户端便进入 SYN-SENT 状态，x 表示客户端的数据通信初始序号。</p></blockquote><p>第二次握手</p><blockquote><p>服务端收到连接请求报文段后，如果同意连接，则会发送一个应答，该应答中也会包含自身的数据通讯初始序号，发送完成后便进入 SYN-RECEIVED 状态。</p></blockquote><p>第三次握手</p><blockquote><p>当客户端收到连接同意的应答后，还要向服务端发送一个确认报文。客户端发完这个报文段后便进入 ESTABLISHED 状态，服务端收到这个应答后也进入 ESTABLISHED 状态，此时连接建立成功。</p></blockquote><ul><li>PS：第三次握手可以包含数据，通过 TCP 快速打开（ TFO ）技术。其实只要涉及到握手的协议，都可以使用类似 TFO 的方式，客户端和服务端存储相同 cookie ，下次握手时发出 cookie 达到减少 RTT 的目的</li></ul><p>你是否有疑惑明明两次握手就可以建立起连接，为什么还需要第三次应答？</p><ul><li>因为这是为了防止失效的连接请求报文段被服务端接收，从而产生错误</li><li>可以想象如下场景。客户端发送了一个连接请求 A，但是因为网络原因造成了超时，这时 TCP 会启动超时重传的机制再次发送一个连接请求 B。此时请求顺利到达服务端，服务端应答完就建立了请求,然后接收数据后释放了连接。</li></ul><blockquote><p>如果连接请求 A 在两端关闭后终于抵达了服务端，那么这时服务端会认为客户端又需要建立 TCP 连接，从而应答了该请求并进入 ESTABLISHED 状态。此时客户端其实是 CLOSED 状态，那么就会导致服务端一直等待，造成资源的浪费 PS：在建立连接中，任意一端掉线，TCP 都会重发 SYN 包，一般会重试五次，在建立连接中可能会遇到 SYN FLOOD 攻击。遇到这种情况你可以选择调低重试次数或者干脆在不能处理的情况下拒绝请求</p></blockquote><p>断开链接四次握手</p><blockquote><p>TCP 是全双工的，在断开连接时两端都需要发送 FIN 和 ACK 。</p></blockquote><p>第一次握手</p><blockquote><p>若客户端 A 认为数据发送完成，则它需要向服务端 B 发送连接释放请求。</p></blockquote><p>第二次握手</p><blockquote><p>B 收到连接释放请求后，会告诉应用层要释放 TCP 链接。然后会发送 ACK 包，并进入 CLOSE_WAIT 状态，表示 A 到 B 的连接已经释放，不接收 A 发的数据了。但是因为 TCP 连接时双向的，所以 B 仍旧可以发送数据给 A。</p></blockquote><ol start="3"><li>ARQ 协议 <blockquote><p>ARQ 协议也就是超时重传机制。通过确认和超时机制保证了数据的正确送达， ARQ 协议包含停止等待 ARQ 和连续 ARQ 两种协议。</p></blockquote></li></ol><p>停止等待 ARQ 正常传输过程</p><blockquote><p>只要 A 向 B 发送一段报文，都要停止发送并启动一个定时器，等待对端回应，在定时器时间内接收到对端应答就取消定时器并发送下一段报文。</p></blockquote><p>报文丢失或出错</p><ul><li>在报文传输的过程中可能会出现丢包。这时候超过定时器设定的时间就会再次发送丢失的数据直到对端响应，所以需要每次都备份发送的数据。</li><li>即使报文正常的传输到对端，也可能出现在传输过程中报文出错的问题。这时候对端会抛弃该报文并等待 A 端重传。</li><li>PS：一般定时器设定的时间都会大于一个 RTT 的平均时间。</li></ul><p>第三次握手</p><blockquote><p>B 如果此时还有没发完的数据会继续发送，完毕后会向 A 发送连接释放请求，然后 B 便进入 LAST-ACK 状态。 PS：通过延迟确认的技术（通常有时间限制，否则对方会误认为需要重传），可以将第二次和第三次握手合并，延迟 ACK 包的发送。</p></blockquote><p>第四次握手</p><ul><li>A 收到释放请求后，向 B 发送确认应答，此时 A 进入 TIME-WAIT 状态。该状态会持续 2MSL（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃） 时间，若该时间段内没有 B 的重发请求的话，就进入 CLOSED 状态。当 B 收到确认应答后，也便进入 CLOSED 状态。</li></ul><blockquote><p>为什么 A 要进入 TIME-WAIT 状态，等待 2MSL 时间后才进入 CLOSED 状态？</p></blockquote><ul><li>为了保证 B 能收到 A 的确认应答。若 A 发完确认应答后直接进入 CLOSED 状态，如果确认应答因为网络问题一直没有到达，那么会造成 B 不能正常关闭</li></ul><p>ACK 超时或丢失</p><ul><li>对端传输的应答也可能出现丢失或超时的情况。那么超过定时器时间 A 端照样会重传报文。这时候 B 端收到相同序号的报文会丢弃该报文并重传应答，直到 A 端发送下一个序号的报文。</li><li>在超时的情况下也可能出现应答很迟到达，这时 A 端会判断该序号是否已经接收过，如果接收过只需要丢弃应答即可。</li><li>从上面的描述中大家肯定可以发现这肯定不是一个高效的方式。假设在良好的网络环境中，每次发送数据都需要等待片刻肯定是不能接受的。那么既然我们不能接受这个不那么高效的协议，就来继续学习相对高效的协议吧。</li></ul><p>连续 ARQ</p><blockquote><p>在连续 ARQ 中，发送端拥有一个发送窗口，可以在没有收到应答的情况下持续发送窗口内的数据，这样相比停止等待 ARQ 协议来说减少了等待时间，提高了效率。</p></blockquote><p>累计确认</p><blockquote><p>连续 ARQ 中，接收端会持续不断收到报文。如果和停止等待 ARQ 中接收一个报文就发送一个应答一样，就太浪费资源了。通过累计确认，可以在收到多个报文以后统一回复一个应答报文。报文中的 ACK 标志位可以用来告诉发送端这个序号之前的数据已经全部接收到了，下次请发送这个序号后的数据。</p></blockquote><blockquote><p>但是累计确认也有一个弊端。在连续接收报文时，可能会遇到接收到序号 5 的报文后，并未接收到序号 6 的报文，然而序号 7 以后的报文已经接收。遇到这种情况时，ACK 只能回复 6，这样就会造成发送端重复发送数据的情况</p></blockquote><ol start="4"><li>滑动窗口</li></ol><ul><li><p>上面小节中讲到了发送窗口。在 TCP 中，两端其实都维护着窗口：分别为发送端窗口和接收端窗口。</p></li><li><p>发送端窗口包含已发送但未收到应答的数据和可以发送但是未发送的数据。</p></li><li><p>发送端窗口是由接收窗口剩余大小决定的。接收方会把当前接收窗口的剩余大小写入应答报文，发送端收到应答后根据该值和当前网络拥塞情况设置发送窗口的大小，所以发送窗口的大小是不断变化的。</p></li><li><p>当发送端接收到应答报文后，会随之将窗口进行滑动</p></li></ul><blockquote><p>滑动窗口是一个很重要的概念，它帮助 TCP 实现了流量控制的功能。接收方通过报文告知发送方还可以发送多少数据，从而保证接收方能够来得及接收数据，防止出现接收方带宽已满，但是发送方还一直发送数据的情况</p></blockquote><p>Zero 窗口</p><blockquote><p>在发送报文的过程中，可能会遇到对端出现零窗口的情况。在该情况下，发送端会停止发送数据，并启动 persistent timer 。该定时器会定时发送请求给对端，让对端告知窗口大小。在重试次数超过一定次数后，可能会中断 TCP 链接</p></blockquote><ol start="5"><li>拥塞处理</li></ol><ul><li>拥塞处理和流量控制不同，后者是作用于接收方，保证接收方来得及接受数据。而前者是作用于网络，防止过多的数据拥塞网络，避免出现网络负载过大的情况。</li><li>拥塞处理包括了四个算法，分别为：慢开始，拥塞避免，快速重传，快速恢复</li></ul><p>慢开始算法</p><blockquote><p>慢开始算法，顾名思义，就是在传输开始时将发送窗口慢慢指数级扩大，从而避免一开始就传输大量数据导致网络拥塞。想必大家都下载过资源，每当我们开始下载的时候都会发现下载速度是慢慢提升的，而不是一蹴而就直接拉满带宽</p></blockquote><p>慢开始算法步骤具体如下</p><ul><li>连接初始设置拥塞窗口（Congestion Window） 为 1 MSS （一个分段的最大数据量）</li><li>每过一个 RTT 就将窗口大小乘二</li><li>指数级增长肯定不能没有限制的，所以有一个阈值限制，当窗口大小大于阈值时就会启动拥塞避免算法。</li></ul><p>拥塞避免算法</p><ul><li><p>拥塞避免算法相比简单点，每过一个 RTT 窗口大小只加一，这样能够避免指数级增长导致网络拥塞，慢慢将大小调整到最佳值。</p></li><li><p>在传输过程中可能定时器超时的情况，这时候 TCP 会认为网络拥塞了，会马上进行以下步骤：</p><p>1.将阈值设为当前拥塞窗口的一半 2.将拥塞窗口设为 1 MSS 3.启动拥塞避免算法</p></li></ul><p>快速重传</p><blockquote><p>快速重传一般和快恢复一起出现。一旦接收端收到的报文出现失序的情况，接收端只会回复最后一个顺序正确的报文序号。如果发送端收到三个重复的 ACK ，无需等待定时器超时而是直接启动快速重传算法。具体算法分为两种：</p></blockquote><p>TCP Taho 实现如下</p><ul><li>将阈值设为当前拥塞窗口的一半</li><li>将拥塞窗口设为 1 MSS</li><li>重新开始慢开始算法</li><li>TCP Reno 实现如下</li></ul><p>拥塞窗口减半</p><ul><li>将阈值设为当前拥塞窗口</li><li>进入快恢复阶段（重发对端需要的包，一旦收到一个新的 ACK 答复就退出该阶段），这种方式在丢失多个包的情况下就不那么好了</li><li>使用拥塞避免算法</li></ul><p>TCP New Ren 改进后的快恢复</p><ul><li>TCP New Reno 算法改进了之前 TCP Reno 算法的缺陷。在之前，快恢复中只要收到一个新的 ACK 包，就会退出快恢复。</li><li>在 TCP New Reno 中，TCP 发送方先记下三个重复 ACK 的分段的最大序号。</li></ul><blockquote><p>假如我有一个分段数据是 1 ~ 10 这十个序号的报文，其中丢失了序号为 3 和 7 的报文，那么该分段的最大序号就是 10。发送端只会收到 ACK 序号为 3 的应答。这时候重发序号为 3 的报文，接收方顺利接收的话就会发送 ACK 序号为 7 的应答。这时候 TCP 知道对端是有多个包未收到，会继续发送序号为 7 的报文，接收方顺利接收并会发送 ACK 序号为 11 的应答，这时发送端认为这个分段接收端已经顺利接收，接下来会退出快恢复阶段。</p></blockquote><h2 id="http" tabindex="-1"><a class="header-anchor" href="#http" aria-hidden="true">#</a> HTTP</h2><blockquote><p>HTTP 协议是个无状态协议，不会保存状态</p></blockquote><p><strong>Post 和 Get 的区别</strong></p><ul><li>Get 请求能缓存， Post 不能</li><li>Post 相对 Get 安全一点点，因为 Get 请求都包含在 URL 里，且会被浏览器保存历史纪录， Post 不会，但是在抓包的情况下都是一样的。</li><li>Post 可以通过 request body 来传输比 Get 更多的数据， Get 没有这个技术</li><li>URL 有长度限制，会影响 Get 请求，但是这个长度限制是浏览器规定的，不是 RFC 规定的</li><li>Post 支持更多的编码类型且不对数据类型限制</li></ul><p><strong>常见状态码</strong> 2XX 成功</p><ul><li>200 OK ，表示从客户端发来的请求在服务器端被正确处理</li><li>204 No content ，表示请求成功，但响应报文不含实体的主体部分</li><li>205 Reset Content ，表示请求成功，但响应报文不含实体的主体部分，但是与 204 响应不同在于要求请求方重置内容</li><li>206 Partial Content ，进行范围请求</li></ul><p>3XX 重定向</p><ul><li>301 moved permanently ，永久性重定向，表示资源已被分配了新的 URL</li><li>302 found ，临时性重定向，表示资源临时被分配了新的 URL</li><li>303 see other ，表示资源存在着另一个 URL，应使用 GET 方法丁香获取资源</li><li>304 not modified ，表示服务器允许访问资源，但因发生请求未满足条件的情况</li><li>307 temporary redirect ，临时重定向，和 302 含义类似，但是期望客户端保持请求方法不变向新的地址发出请求</li></ul><p>4XX 客户端错误</p><ul><li>400 bad request ，请求报文存在语法错误</li><li>401 unauthorized ，表示发送的请求需要有通过 HTTP 认证的认证信息</li><li>403 forbidden ，表示对请求资源的访问被服务器拒绝</li><li>404 not found ，表示在服务器上没有找到请求的资源</li></ul><p>5XX 服务器错误</p><ul><li>500 internal sever error ，表示服务器端在执行请求时发生了错误</li><li>501 Not Implemented ，表示服务器不支持当前请求所需要的某个功能</li><li>503 service unavailable ，表明服务器暂时处于超负载或正在停机维护，无法处理请求</li></ul><p><strong>HTTP 首部</strong></p><table style="width:600px;"><tr><th>通用字段</th><th>作用</th></tr><tr><td>Cache-Control</td><td>控制缓存的行为</td></tr><tr><td>Connection</td><td>浏览器想要优先使用的连接类型，比如 keep-alive</td></tr><tr><td>Date</td><td>创建报文时间</td></tr><tr><td>Pragma</td><td>报文指令</td></tr><tr><td>Via</td><td>代理服务器相关信息</td></tr><tr><td>Transfer-Encoding</td><td>传输编码方式</td></tr><tr><td>Upgrade</td><td>要求客户端升级协议</td></tr><tr><td>Warning</td><td>在内容中可能存在错误</td></tr></table><table style="width:600px;"><tr><th>请求字段</th><th>作用</th></tr><tr><td>Accept</td><td>能正确接收的媒体类型</td></tr><tr><td>Accept-Charset</td><td>能正确接收的字符集</td></tr><tr><td>Accept-Encoding</td><td>能正确接收的编码格式列表</td></tr><tr><td>Accept-Language</td><td>能正确接收的语言列表</td></tr><tr><td>Expect</td><td>期待服务端的指定行为</td></tr><tr><td>From</td><td>请求方邮箱地址</td></tr><tr><td>Host</td><td>服务器的域名</td></tr><tr><td>If-Match</td><td>两端资源标记比较</td></tr><tr><td>If-Modified-Since</td><td>本地资源未修改返回 304（比较时间）</td></tr><tr><td>If-None-Match</td><td>本地资源未修改返回 304（比较标记）</td></tr><tr><td>User-Agent</td><td>客户端信息</td></tr><tr><td>Max-Forwards</td><td>限制可被代理及网关转发的次数</td></tr><tr><td>Proxy-Authorization</td><td>向代理服务器发送验证信息</td></tr><tr><td>Range</td><td>请求某个内容的一部分</td></tr><tr><td>Referer</td><td>表示浏览器所访问的前一个页面</td></tr><tr><td>TE</td><td>传输编码方式</td></tr></table><table style="width:600px;"><tr><th>响应字段</th><th>作用</th></tr><tr><td>Accept-Ranges</td><td>是否支持某些种类的范围</td></tr><tr><td>Age</td><td>资源在代理缓存中存在的时间</td></tr><tr><td>ETag</td><td>资源标识</td></tr><tr><td>Location</td><td>客户端重定向到某个 URL</td></tr><tr><td>Proxy-Authenticate</td><td>向代理服务器发送验证信息</td></tr><tr><td>Server</td><td>服务器名字</td></tr><tr><td>WWW-Authenticate</td><td>获取资源需要的验证信息</td></tr></table><table style="width:600px;"><tr><th>实体字段</th><th>作用</th></tr><tr><td>Allow</td><td>资源的正确请求方式</td></tr><tr><td>Content-Encoding</td><td>内容的编码格式</td></tr><tr><td>Content-Language</td><td>内容使用的语言</td></tr><tr><td>Content-Length</td><td>request body 长度</td></tr><tr><td>Content-Location</td><td>返回数据的备用地址</td></tr><tr><td>Content-MD5</td><td>Base64 加密格式的内容 MD5 检验值</td></tr><tr><td>Content-Range</td><td>内容的位置范围</td></tr><tr><td>Content-Type</td><td>内容的媒体类型</td></tr><tr><td>Expires</td><td>内容的过期时间</td></tr><tr><td>Last_modified </td><td>内容的最后修改时间</td></tr></table><h2 id="tls" tabindex="-1"><a class="header-anchor" href="#tls" aria-hidden="true">#</a> TLS</h2><ul><li>HTTPS 还是通过了 HTTP 来传输信息，但是信息通过 TLS 协议进行了加密。</li><li>TLS 协议位于传输层之上，应用层之下。首次进行 TLS 协议传输需要两个 RTT ，接下来可以通过 Session Resumption 减少到一个 RTT 。</li><li>在 TLS 中使用了两种加密技术，分别为：对称加密和非对称加密。</li></ul><p>对称加密</p><ul><li>对称加密就是两边拥有相同的秘钥，两边都知道如何将密文加密解密。</li><li>这种加密方式固然很好，但是问题就在于如何让双方知道秘钥。因为传输数据都是走的网络，如果将秘钥通过网络的方式传递的话，一旦秘钥被截获就没有加密的意义的。</li></ul><p>非对称加密</p><ul><li>有公钥私钥之分，公钥所有人都可以知道，可以将数据用公钥加密，但是将数据解密必须使用私钥解密，私钥只有分发公钥的一方才知道。</li><li>这种加密方式就可以完美解决对称加密存在的问题。假设现在两端需要使用对称加密，那么在这之前，可以先使用非对称加密交换秘钥。</li></ul><blockquote><p>简单流程如下：首先服务端将公钥公布出去，那么客户端也就知道公钥了。接下来客户端创建一个秘钥，然后通过公钥加密并发送给服务端，服务端接收到密文以后通过私钥解密出正确的秘钥，这时候两端就都知道秘钥是什么了。</p></blockquote><p>TLS 握手过程如下图：</p><ul><li>客户端发送一个随机值以及需要的协议和加密方式。</li><li>服务端收到客户端的随机值，自己也产生一个随机值，并根据客户端需求的协议和加密方式来使用对应的方式，并且发送自己的证书（如果需要验证客户端证书需要说明）</li><li>客户端收到服务端的证书并验证是否有效，验证通过会再生成一个随机值，通过服务端证书的公钥去加密这个随机值并发送给服务端，如果服务端需要验证客户端证书的话会附带证书</li><li>服务端收到加密过的随机值并使用私钥解密获得第三个随机值，这时候两端都拥有了三个随机值，可以通过这三个随机值按照之前约定的加密方式生成密钥，接下来的通信就可以通过该密钥来加密解密</li><li>通过以上步骤可知，在 TLS 握手阶段，两端使用非对称加密的方式来通信，但是因为非对称加密损耗的性能比对称加密大，所以在正式传输数据时，两端使用对称加密的方式通信。</li></ul><blockquote><p>PS：以上说明的都是 TLS 1.2 协议的握手情况，在 1.3 协议中，首次建立连接只需要一个 RTT，后面恢复连接不需要 RTT 了</p></blockquote><h2 id="http2-0" tabindex="-1"><a class="header-anchor" href="#http2-0" aria-hidden="true">#</a> HTTP2.0</h2><blockquote><ul><li>HTTP/2 很好的解决了当下最常用的 HTTP/1 所存在的一些性能问题，只需要升级到该协议就可以减少很多之前需要做的性能优化工作，当然兼容问题以及如何优雅降级应该是国内还不普遍使用的原因之一。</li><li>虽然 HTTP/2 已经解决了很多问题，但是并不代表它已经是完美的了，HTTP/3 就是为了解决 HTTP/2 所存在的一些问题而被推出来的。</li></ul></blockquote><h3 id="http-2" tabindex="-1"><a class="header-anchor" href="#http-2" aria-hidden="true">#</a> HTTP/2</h3><ul><li>HTTP/2 相比于 HTTP/1 ，可以说是大幅度提高了网页的性能。</li><li>在 HTTP/1 中，为了性能考虑，我们会引入雪碧图、将小图内联、使用多个域名等等的方式。这一切都是因为浏览器限制了同一个域名下的请求数量（Chrome 下一般是限制六个连接），当页面中需要请求很多资源的时候，队头阻塞（Head of line blocking）会导致在达到最大请求数量时，剩余的资源需要等待其他资源请求完成后才能发起请求。</li><li>在 HTTP/2 中引入了多路复用的技术，这个技术可以只通过一个 TCP 连接就可以传输所有的请求数据。多路复用很好的解决了浏览器限制同一个域名下的请求数量的问题，同时也接更容易实现全速传输，毕竟新开一个 TCP 连接都需要慢慢提升传输速度。</li></ul>`,139),m={href:"https://http2.akamai.com/demo",target:"_blank",rel:"noopener noreferrer"},T=a('<blockquote><p>在 HTTP/1 中，因为队头阻塞的原因，你会发现发送请求是长这样的</p></blockquote><blockquote><p>在 HTTP/2 中，因为可以复用同一个 TCP 连接，你会发现发送请求是长这样的</p></blockquote><h3 id="二进制传输" tabindex="-1"><a class="header-anchor" href="#二进制传输" aria-hidden="true">#</a> 二进制传输</h3><blockquote><p>HTTP/2 中所有加强性能的核心点在于此。在之前的 HTTP 版本中，我们是通过文本的方式传输数据。在 HTTP/2 中引入了新的编码机制，所有传输的数据都会被分割，并采用二进制格式编码。</p></blockquote><h3 id="多路复用" tabindex="-1"><a class="header-anchor" href="#多路复用" aria-hidden="true">#</a> 多路复用</h3><ul><li>在 HTTP/2 中，有两个非常重要的概念，分别是帧（frame）和流（stream）。</li><li>帧代表着最小的数据单位，每个帧会标识出该帧属于哪个流，流也就是多个帧组成的数据流。</li><li>多路复用，就是在一个 TCP 连接中可以存在多条流。换句话说，也就是可以发送多个请求，对端可以通过帧中的标识知道属于哪个请求。通过这个技术，可以避免 HTTP 旧版本中的队头阻塞问题，极大的提高传输性能。</li></ul><h3 id="header-压缩" tabindex="-1"><a class="header-anchor" href="#header-压缩" aria-hidden="true">#</a> Header 压缩</h3><ul><li>在 HTTP/1 中，我们使用文本的形式传输 header ，在 header 携带 cookie 的情况下，可能每次都需要重复传输几百到几千的字节。</li><li>在 HTTP / 2 中，使用了 HPACK 压缩格式对传输的 header 进行编码，减少了 header 的大小。并在两端维护了索引表，用于记录出现过的 header ，后面在传输过程中就可以传输已经记录过的 header 的键名，对端收到数据后就可以通过键名找到对应的值。</li></ul><h3 id="服务端-push" tabindex="-1"><a class="header-anchor" href="#服务端-push" aria-hidden="true">#</a> 服务端 Push</h3><ul><li>在 HTTP/2 中，服务端可以在客户端某个请求后，主动推送其他资源。</li><li>可以想象以下情况，某些资源客户端是一定会请求的，这时就可以采取服务端 push 的技术，提前给客户端推送必要的资源，这样就可以相对减少一点延迟时间。当然在浏览器兼容的情况下你也可以使用 prefetch</li></ul><h3 id="http-3" tabindex="-1"><a class="header-anchor" href="#http-3" aria-hidden="true">#</a> HTTP/3</h3><ul><li>虽然 HTTP/2 解决了很多之前旧版本的问题，但是它还是存在一个巨大的问题，虽然这个问题并不是它本身造成的，而是底层支撑的 TCP 协议的问题。</li><li>因为 HTTP/2 使用了多路复用，一般来说同一域名下只需要使用一个 TCP 连接。当这个连接中出现了丢包的情况，那就会导致 HTTP/2 的表现情况反倒不如 HTTP/1 了。</li><li>因为在出现丢包的情况下，整个 TCP 都要开始等待重传，也就导致了后面的所有数据都被阻塞了。但是对于 HTTP/1 来说，可以开启多个 TCP 连接，出现这种情况反到只会影响其中一个连接，剩余的 TCP 连接还可以正常传输数据。</li><li>那么可能就会有人考虑到去修改 TCP 协议，其实这已经是一件不可能完成的任务了。因为 TCP 存在的时间实在太长，已经充斥在各种设备中，并且这个协议是由操作系统实现的，更新起来不大现实。</li><li>基于这个原因，Google 就更起炉灶搞了一个基于 UDP 协议的 QUIC 协议，并且使用在了 HTTP/3 上，当然 HTTP/3 之前名为 HTTP-over-QUIC ，从这个名字中我们也可以发现，HTTP/3 最大的改造就是使用了 QUIC ，接下来我们就来学习关于这个协议的内容。</li></ul><p>QUIC</p><blockquote><p>之前我们学习过 UDP 协议的内容，知道这个协议虽然效率很高，但是并不是那么的可靠。QUIC 虽然基于 UDP，但是在原本的基础上新增了很多功能，比如多路复用、0-RTT、使用 TLS1.3 加密、流量控制、有序交付、重传等等功能。这里我们就挑选几个重要的功能学习下这个协议的内容。</p></blockquote><p>多路复用</p><blockquote><p>虽然 HTTP/2 支持了多路复用，但是 TCP 协议终究是没有这个功能的。QUIC 原生就实现了这个功能，并且传输的单个数据流可以保证有序交付且不会影响其他的数据流，这样的技术就解决了之前 TCP 存在的问题。</p></blockquote><ul><li>并且 QUIC 在移动端的表现也会比 TCP 好。因为 TCP 是基于 IP 和端口去识别连接的，这种方式在多变的移动端网络环境下是很脆弱的。但是 QUIC 是通过 ID ** 的方式去识别一个连接，不管你网络环境如何变化，只要 ID 不变，就能迅速重连上。</li></ul><p>0-RTT</p><blockquote><p>通过使用类似 TCP 快速打开的技术，缓存当前会话的上下文，在下次恢复会话的时候，只需要将之前的缓存传递给服务端验证通过就可以进行传输了。</p></blockquote><p>纠错机制</p><ul><li>假如说这次我要发送三个包，那么协议会算出这三个包的异或值并单独发出一个校验包，也就是总共发出了四个包。</li><li>当出现其中的非校验包丢包的情况时，可以通过另外三个包计算出丢失的数据包的内容。</li><li>当然这种技术只能使用在丢失一个包的情况下，如果出现丢失多个包就不能使用纠错机制了，只能使用重传的方式了</li></ul><h2 id="dns" tabindex="-1"><a class="header-anchor" href="#dns" aria-hidden="true">#</a> DNS</h2><blockquote><p>DNS 的作用就是通过域名查询到具体的 IP。</p></blockquote><ul><li>因为 IP 存在数字和英文的组合（IPv6），很不利于人类记忆，所以就出现了域名。你可以把域名看成是某个 IP 的别名，DNS 就是去查询这个别名的真正名称是什么</li></ul>',24),g={href:"http://www.google.com",target:"_blank",rel:"noopener noreferrer"},S=a(`<ul><li>操作系统会首先在本地缓存中查询</li><li>没有的话会去系统配置的 DNS 服务器中查询</li><li>如果这时候还没得话，会直接去 DNS 根服务器查询，这一步查询会找出负责 com 这个一级域名的服务器</li><li>然后去该服务器查询 google 这个二级域名</li><li>接下来三级域名的查询其实是我们配置的，你可以给 www 这个域名配置一个 IP，然后还可以给别的三级域名配置一个 IP</li></ul><blockquote><p>以上介绍的是 DNS 迭代查询，还有种是递归查询，区别就是前者是由客户端去做请求，后者是由系统配置的 DNS 服务器做请求，得到结果后将数据返回给客户端。</p></blockquote><h2 id="存储" tabindex="-1"><a class="header-anchor" href="#存储" aria-hidden="true">#</a> 存储</h2><blockquote><p>涉及面试题：有几种方式可以实现存储功能，分别有什么优缺点？什么是 Service Worker ？ cookie，localStorage，sessionStorage，indexDB</p></blockquote><table><thead><tr><th>特性</th><th>cookie</th><th>localStorage</th><th>sessionStorage</th><th>indexDB</th></tr></thead><tbody><tr><td>数据生命周期</td><td>一般由服务器生成，可以设置过期时间</td><td>除非被清理，否则一直存在</td><td>页面关闭就清理</td><td>除非被清理，否则一直存在</td></tr><tr><td>数据存储大小</td><td>4K</td><td>5M</td><td>5M</td><td>无限</td></tr><tr><td>与服务端通信</td><td>每次都会携带在 header 中，对于请求性能影响</td><td>不参与</td><td>不参与</td><td>不参与</td></tr></tbody></table><blockquote><p>从上表可以看到， cookie 已经不建议用于存储。如果没有大量数据存储需求的话，可以使用 localStorage 和 sessionStorage 。对于不怎么改变的数据尽量使用 localStorage 存储，否则可以用 sessionStorage 存储</p></blockquote><p><strong>对于 cookie 来说，我们还需要注意安全性。</strong></p><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>value</td><td>如果用于保存用户登录态，应该将该值加密，不能使用明文的用户标识</td></tr><tr><td>http-only</td><td>不能通过 JS 访问 Cookie ，减少 XSS 攻击</td></tr><tr><td>secure</td><td>只能在协议为 HTTPS 的请求中携带</td></tr><tr><td>same-site</td><td>规定浏览器不能在跨域请求中携带 Cookie ，减少 CSRF 攻击</td></tr></tbody></table><p><strong>Service Worker</strong></p><ul><li>Service Worker 是运行在浏览器背后的独立线程，一般可以用来实现缓存功能。使用 Service Worker 的话，传输协议必须为 HTTPS 。因为 Service Worker 中涉及到请求拦截，所以必须使用 HTTPS 协议来保障安全</li><li>Service Worker 实现缓存功能一般分为三个步骤：首先需要先注册 Service Worker ，然后监听到 install 事件以后就可以缓存需要的文件，那么在下次用户访问的时候就可以通过拦截请求的方式查询是否存在缓存，存在缓存的话就可以直接读取缓存文件，否则就去请求数据。以下是这个步骤的实现：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// index.js</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>serviceWorker<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  navigator<span class="token punctuation">.</span>serviceWorker
    <span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">&#39;sw.js&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">registration</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;service worker 注册成功&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;servcie worker 注册失败&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// sw.js</span>
<span class="token comment">// 监听 install 事件，回调中缓存所需文件</span>
self<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;install&#39;</span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  e<span class="token punctuation">.</span><span class="token function">waitUntil</span><span class="token punctuation">(</span>
    caches<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;my-cache&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">cache</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> cache<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;./index.html&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;./index.js&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 拦截所有请求事件</span>
<span class="token comment">// 如果缓存中已经有请求的数据就直接用缓存，否则去请求数据</span>
self<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;fetch&#39;</span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  e<span class="token punctuation">.</span><span class="token function">respondWith</span><span class="token punctuation">(</span>
    caches<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">return</span> response
      <span class="token punctuation">}</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;fetch source&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>打开页面，可以在开发者工具中的 Application 看到 Service Worker 已经启动了 在 Cache 中也可以发现我们所需的文件已被缓存 当我们重新刷新页面可以发现我们缓存的数据是从 Service Worker 中读取的</p></blockquote>`,12);function C(f,P){const t=c("ExternalLinkIcon");return p(),o("div",null,[u,i(" more "),d,n("blockquote",null,[n("p",null,[s("实现比较简单，服务端库如 "),n("a",k,[s("socket.io"),e(t)]),s(" 、 ws ，可以很好的帮助我们入门。而客户端也只需要参照 api 实现即可")])]),h,n("blockquote",null,[n("p",null,[s("更多缓存知识详解 "),n("a",b,[s("http://blog.poetries.top/2019/01/02/browser-cache"),e(t)])])]),v,n("blockquote",null,[n("p",null,[s("大家可以通过 "),n("a",m,[s("该链接"),e(t)]),s(" 感受下 HTTP/2 比 HTTP/1 到底快了多少")])]),T,n("blockquote",null,[n("p",null,[s("在 TCP 握手之前就已经进行了 DNS 查询，这个查询是操作系统自己做的。当你在浏览器中想访问 "),n("a",g,[s("www.google.com"),e(t)]),s(" 时，会进行一下操作")])]),S])}const y=l(r,[["render",C],["__file","浏览器网络篇.html.vue"]]);export{y as default};
