import{_ as a,W as t,X as p,Y as e,Z as n,$ as o,a0 as s}from"./framework-d2dfa12e.js";const c="/vuepress-note/images/手写vue2源码/（三十二）组件部分-组件的生命周期/img1.png",l="/vuepress-note/images/手写vue2源码/（三十二）组件部分-组件的生命周期/img2.png",i={},u=n("p",null,"组件部分-组件的生命周期",-1),m=o(`<h2 id="前文回顾" tabindex="-1"><a class="header-anchor" href="#前文回顾" aria-hidden="true">#</a> 前文回顾</h2><ol><li>Vue.component 方法：</li></ol><ul><li>Vue.component 方法用于注册 Vue 全局组件；</li><li>当组件定义 definition 为对象时，在 Vue.component 内部会使用 Vue.extend 方法对组件定义 definition 进行处理，返回组件的构造函数；</li><li>将组件与组件的构造函数关系维护到全局对象 Vue.options.components 中，便于后续的使用；</li></ul><ol start="2"><li>当 new Vue 初始化时：</li></ol><ul><li>new Vue 会执行 Vue 原型方法 _init 进行初始化流程，mergeOptions 会进行组件的合并；</li><li>通过 mergeOptions(vm.constructor.options, options)将全局组件定义合并到局部组件定义上；</li><li>组件查找时，会优先查找对应的局部组件定义，若未找到再通过链__proto__继续向上查找全局组件定义；</li></ul><ol start="3"><li>组件的编译流程：</li></ol><ul><li>与模板编译流程一致，html 模板-&gt;AST 语法树-&gt;生成 render 函数，执行_c（即 createElement）创建虚拟节点；</li><li>在 createElement 方法中，如果是组件则通过 createComponent 方法创建组件虚拟节点 componentVnode；</li><li>在 createComponent 方法中，当 Ctor 为对象时，使用 Vue.extend 进行处理，生成组件的构造函数；</li><li>componentVnode 中包含 componentOptions 组件选项，componentOptions 中包含组件构造函数 Ctor（此时 componentOptions 中的 Ctor 一定为函数）；</li></ul><p>到这里，就完成了组件虚拟节点的创建； 注意：所有的组件都是通过 Vue.extend 方法来实现的； 接下来，根据组件的虚拟节点创建组件的真实节点，之后再进行挂载；</p><h2 id="组件的生命周期" tabindex="-1"><a class="header-anchor" href="#组件的生命周期" aria-hidden="true">#</a> 组件的生命周期</h2><p>当组件初始化时，执行初始化的回调，即 hook 钩子；在不同的地方执行不同的钩子 new Ctor() 扩展组件 data 属性，为组件添加生命周期钩子函数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 创造组件的虚拟节点 componentVnode
 */</span>
<span class="token keyword">function</span> <span class="token function">createComponent</span><span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">,</span> key<span class="token punctuation">,</span> Ctor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>Ctor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 获取 Vue 并通过 Vue.extend 将对象处理成为组件的构造函数</span>
    Ctor <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>_base<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>Ctor<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 扩展组件的生命周期</span>
  data<span class="token punctuation">.</span>hook <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">let</span> child <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ctor</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      child<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">prepatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">postpatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 创建vnode时,组件是没有文本的,需要传入 undefined</span>
  <span class="token comment">// 注意：组件没有孩子，组件的孩子就是插槽,将 children 放到组件的选项中</span>
  <span class="token keyword">let</span> componentVnode <span class="token operator">=</span> <span class="token function">vnode</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>Ctor<span class="token punctuation">,</span> children<span class="token punctuation">,</span> tag<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> componentVnode<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>创建组件的真实节点</strong></p><p>如何去找组件的真实节点？ create 方法完成之后，会继续执行 patch 方法， createElm 方法，是真正将虚拟节点转化为真实节点的位置； 由于组件的加入，此时的 createElm 方法中可能会包含 componentOptions：</p><p>第一次：id 为 app 的真实节点： <img src="`+c+'" alt="" loading="lazy"></p><p>第二次：my-button 组件： <img src="'+l+`" alt="" loading="lazy"></p><p>在原 createElm 方法中，是直接通过 document.createElement(tag)创建标签，现在还需要添加对组件类型的处理，通过 createComponent 创建组件的真实节点:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 创造组件的真实节点
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">vnode</span>
 */</span>
<span class="token keyword">function</span> <span class="token function">createComponent</span><span class="token punctuation">(</span><span class="token parameter">vnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 面试：虚拟节点的实现？如何将虚拟节点渲染成真实节点</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createElm</span><span class="token punctuation">(</span><span class="token parameter">vnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 虚拟节点必备的三个：标签，数据，孩子</span>
  <span class="token keyword">let</span> <span class="token punctuation">{</span> tag<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">,</span> text<span class="token punctuation">,</span> vm <span class="token punctuation">}</span> <span class="token operator">=</span> vnode<span class="token punctuation">;</span>
  <span class="token keyword">debugger</span><span class="token punctuation">;</span>
  <span class="token comment">// vnode.el:绑定真实节点与虚拟节点的映射关系，便于后续的节点更新操作</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> tag <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 元素</span>
    <span class="token comment">// 组件的处理</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">createComponent</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 将组件的虚拟节点，创建成为组件的真实节点</span>

    <span class="token punctuation">}</span>

    <span class="token comment">// 处理当前元素节点</span>
    vnode<span class="token punctuation">.</span>el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span> <span class="token comment">// 创建元素的真实节点</span>
    <span class="token function">updateProperties</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> data<span class="token punctuation">)</span>  <span class="token comment">// 处理元素的 data 属性</span>
    <span class="token comment">// 处理当前元素节点的儿子：递归创建儿子的真实节点，并添加到对应的父亲中</span>
    children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">child</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// 若不存在儿子，children为空数组</span>
      vnode<span class="token punctuation">.</span>el<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">createElm</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 文本：文本中 tag 是 undefined</span>
    vnode<span class="token punctuation">.</span>el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>  <span class="token comment">// 创建文本的真实节点</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> vnode<span class="token punctuation">.</span>el<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 createComponent 方法中，在 data 属性上进行组件生命周期的扩展：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// src/vdom/index.js</span>

<span class="token keyword">function</span> <span class="token function">createComponent</span><span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">,</span> key<span class="token punctuation">,</span> Ctor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>Ctor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 获取 Vue 并通过 Vue.extend 将对象处理成为组件的构造函数</span>
    Ctor <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>_base<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>Ctor<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 扩展组件的生命周期</span>
  data<span class="token punctuation">.</span>hook <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">prepatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">postpatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 创建vnode时,组件是没有文本的,需要传入 undefined</span>
  <span class="token comment">// 注意：组件没有孩子，组件的孩子就是插槽,将 children 放到组件的选项中</span>
  <span class="token keyword">let</span> componentVnode <span class="token operator">=</span> <span class="token function">vnode</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>Ctor<span class="token punctuation">,</span> children<span class="token punctuation">,</span> tag<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> componentVnode<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 createComponent 方法中，尝试获取生命周期 hook，如果 hook 存在说明是组件，再拿到 init 方法，处理虚拟节点 vnode：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 创造组件的真实节点
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">vnode</span>
 */</span>
<span class="token keyword">function</span> <span class="token function">createComponent</span><span class="token punctuation">(</span><span class="token parameter">vnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> i <span class="token operator">=</span> vnode<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">=</span> i<span class="token punctuation">.</span>hook<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>i <span class="token operator">=</span> i<span class="token punctuation">.</span>init<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 最后 i 为 init 方法</span>
    <span class="token function">i</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将 vnode 传入 init 方法</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>先把 hook 赋值给 i，再把 init 赋值给 i，
最终 i 为 init 方法；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>组件的初始化，即 new 组件的构造函数，此时就会进入 init 方法；</p><p><strong>创建组件的真实节点</strong></p>`,24),r=n("p",null,[s("通过 new Ctor 拿到组件的实例，并调用组件的 $mount 方法，生成一个 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"e"),n("mi",null,"l"),n("mo",{separator:"true"},";"),n("mi",null,"v"),n("mi",null,"n"),n("mi",null,"o"),n("mi",null,"d"),n("mi",null,"e"),n("mi",{mathvariant:"normal"},"."),n("mi",null,"c"),n("mi",null,"o"),n("mi",null,"m"),n("mi",null,"p"),n("mi",null,"o"),n("mi",null,"n"),n("mi",null,"e"),n("mi",null,"n"),n("mi",null,"t"),n("mi",null,"I"),n("mi",null,"n"),n("mi",null,"s"),n("mi",null,"t"),n("mi",null,"a"),n("mi",null,"n"),n("mi",null,"c"),n("mi",null,"e"),n("mo",null,"="),n("mi",null,"n"),n("mi",null,"e"),n("mi",null,"w"),n("mi",null,"C"),n("mi",null,"t"),n("mi",null,"o"),n("mi",null,"r"),n("mo",{stretchy:"false"},"("),n("mo",{stretchy:"false"},")"),n("mi",null,"v"),n("mi",null,"n"),n("mi",null,"o"),n("mi",null,"d"),n("mi",null,"e"),n("mi",{mathvariant:"normal"},"."),n("mi",null,"c"),n("mi",null,"o"),n("mi",null,"m"),n("mi",null,"p"),n("mi",null,"o"),n("mi",null,"n"),n("mi",null,"e"),n("mi",null,"n"),n("mi",null,"t"),n("mi",null,"I"),n("mi",null,"n"),n("mi",null,"s"),n("mi",null,"t"),n("mi",null,"a"),n("mi",null,"n"),n("mi",null,"c"),n("mi",null,"e"),n("mi",{mathvariant:"normal"},".")]),n("annotation",{encoding:"application/x-tex"},"el;vnode.componentInstance = new Ctor()vnode.componentInstance.")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),n("span",{class:"mpunct"},";"),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"v"),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal"},"d"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mord"},"."),n("span",{class:"mord mathnormal"},"co"),n("span",{class:"mord mathnormal"},"m"),n("span",{class:"mord mathnormal"},"p"),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.07847em"}},"I"),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mord mathnormal"},"s"),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mord mathnormal"},"an"),n("span",{class:"mord mathnormal"},"ce"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mord mathnormal"},"wCt"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"or"),n("span",{class:"mopen"},"("),n("span",{class:"mclose"},")"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"v"),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal"},"d"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mord"},"."),n("span",{class:"mord mathnormal"},"co"),n("span",{class:"mord mathnormal"},"m"),n("span",{class:"mord mathnormal"},"p"),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.07847em"}},"I"),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mord mathnormal"},"s"),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mord mathnormal"},"an"),n("span",{class:"mord mathnormal"},"ce"),n("span",{class:"mord"},".")])])]),s("el 即为组件渲染后的结果；")],-1),d=n("p",null,[n("strong",null,"将组件的 vnode.componentInstance.$el 插入到父标签中")],-1),k=n("p",null,[n("strong",null,"当组件实例化 new Ctor() 时，会进行组件的初始化，此时会为组件添加一个独立的渲染过程，为每个组件生成各自的渲染 watcher；当组件更新时，只需要更新自己组件对应的渲染 watcher 即可；所以性能是非常高的，因为在组件渲染时，组件对应的属性会收集自己的渲染 watcher")],-1);function v(h,b){return t(),p("div",null,[u,e(" more "),m,r,d,k])}const f=a(i,[["render",v],["__file","（三十二）组件部分-组件的生命周期.html.vue"]]);export{f as default};
