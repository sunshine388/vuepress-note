import{_ as e,W as a,X as t,Y as r,Z as d,$ as i}from"./framework-d2dfa12e.js";const p="/vuepress-note/images/手写vue2源码/（七）渲染流程分析/img1.png",o={},s=d("p",null,"Vue 的数据渲染流程，数据初始化完成后，将开始进行视图渲染",-1),l=i('<h2 id="vue-视图渲染" tabindex="-1"><a class="header-anchor" href="#vue-视图渲染" aria-hidden="true">#</a> Vue 视图渲染</h2><p>vue 支持 template 和 jsx：</p><ol><li>日常开发中，大部分会采用 template 完成模板的编写，因为 template 即简单又方便；</li><li>而相比 template 来讲，jsx 则加更灵活。写法上也显得稍微复杂一些；</li></ol><h2 id="流程分析" tabindex="-1"><a class="header-anchor" href="#流程分析" aria-hidden="true">#</a> 流程分析</h2><p>Vue 需要对 template 进行解析，从而将 template 模板语法转变为 javascript 语法；</p><p>而这个转化的过程，就需要用到 ast 语法树（可描述 css、js、html 等语法）</p><p>使用 ast 语法树来对 html 的语法结构进行描述，根据 ast 树形结构将代码重组为 js 语法</p><p>即后续对 html 模板的操作，就都可以通过 js 来完成，而不必考虑解析字符串了</p><h2 id="vue-模板编译原理" tabindex="-1"><a class="header-anchor" href="#vue-模板编译原理" aria-hidden="true">#</a> Vue 模板编译原理</h2><p>1.将 template 模板编译为 render 函数 2.通过 rander 函数再返回虚拟 dom 3.再通过 diff 算法比对虚拟 dom</p><p>流程：template 模板 -&gt; render 函数 -&gt; 虚拟 dom -&gt; diff 算法</p><h2 id="简单分析" tabindex="-1"><a class="header-anchor" href="#简单分析" aria-hidden="true">#</a> 简单分析</h2><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>div 模板：最终被编译成为一个 render 方法，即 render 函数；</p><p>_c 函数：相当于 createElement，创建 div，内部包含属性 id ，值为 app；</p><p>_v 函数：创建文本，即将_s(msg)创建为一个文本；</p><p>_s 函数：相当于 JSON.stringify，如果模板参数 msg 为对象，通过 _s 使其转为 string</p></blockquote><h2 id="vue-数据渲染的核心流程" tabindex="-1"><a class="header-anchor" href="#vue-数据渲染的核心流程" aria-hidden="true">#</a> Vue 数据渲染的核心流程</h2><ol><li>初次渲染时</li></ol><blockquote><p>template 模板被编译为 ast 语法树；</p><p>通过 ast 语法树生成 render 函数；</p><p>通过 render 函数返回 vnode 虚拟节点；</p><p>使用 vnode 虚拟节点生成真实 dom 并进行渲染；</p></blockquote><ol start="2"><li>视图更新时</li></ol><blockquote><p>调用 render 函数生成新的 vnode 虚拟节点；</p><p>通过 diff 算法对新老 vnode 虚拟节点进行对比；</p><p>根据虚拟节点比对结果，更新真实 dom；</p></blockquote>',19);function n(c,h){return a(),t("div",null,[s,r(" more "),l])}const u=e(o,[["render",n],["__file","（七）渲染流程分析.html.vue"]]);export{u as default};
